# Run on the AWS Organizations management account
#
# Unique Cloud Formation template to
# 1. Deploy common resources used for the deployment of the AWS Config conformance pack by CIRT
# 2. Launch a StackSet on the AWS Config delegated admin (or the management account) to deploy a OrganizationconformancePack in every region

# BOH... this seems too much... also for permissions


AWSTemplateFormatVersion: '2010-09-09'
Description: 'CRCD Dashboard - AWS Customer Incident Response Team (CIRT)-recommended Conformance Pack deployment - RUN in the AWS Organizations management account'

Parameters:
  ExcludedAccounts:
    Type: CommaDelimitedList
    # TODO test with and without spaces
    # TODO input validation?
    Description: "Comma-separated list of account IDs to exclude from conformance pack deployment (e.g., '111111111111,222222222222')"
    Default: ""  # Empty default value

  ConfigDelegatedAdminAccount:
    Type: String
    Description: "AWS Account ID of the AWS Config delegated administrator"
  
  Regions:
    Type: CommaDelimitedList
    Description: "Comma-separated list of regions to deploy to (e.g., 'us-east-1,us-west-2')"
    Default: "us-east-1,us-east-2,us-west-1,us-west-2,ap-south-1,ap-northeast-1,ap-northeast-2,ap-southeast-1,ap-southeast-2,ca-central-1,eu-central-1,eu-west-1,eu-west-2,eu-west-3,sa-east-1"  # Default regions

  ConfirmAWSCloudFormationStackSetAdministrationRole:
    Type: "String"
    Description: "I confirm the AWS Config delegated admin account has the 'AWSCloudFormationStackSetAdministrationRole' role. "
    AllowedValues: ['<select>', 'yes', 'no']
    Default: "<select>" # This value is used below, careful if you change it

Resources:

  # -------------------------------------------------------------------------------------------------------------------------------------
  # resources needed to distribute the conformance pack to the organization
  # -------------------------------------------------------------------------------------------------------------------------------------

  # S3 Bucket in management account to store conformance pack template
  DeliveryS3Bucket:
  # checkov:skip=CKV_AWS_18: No need to have access logging on this bucket
    Type: 'AWS::S3::Bucket'
    Properties:
      # Unified bucket for all regions, hence no need for -${AWS::Region} 
      BucketName: !Sub 'awsconfigconforms-crcd-cirt-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  DeliveryS3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref DeliveryS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSConfigConformsCheckAcls
            Action: s3:GetBucketAcl
            Effect: Allow
            Resource: !GetAtt DeliveryS3Bucket.Arn
            Principal:
              Service: config.amazonaws.com
              # AWS: "*" - this makes it look like it's a public bucket... Resource handler returned message: "User: arn:aws:sts::571600840688:assumed-role/Admin/llucc-Isengard is not authorized to perform: s3:PutBucketPolicy on resource: "arn:aws:s3:::awsconfigconforms-crcd-cirt-571600840688" because public policies are blocked by the BlockPublicPolicy block public access setting.
              # using a specific account's service-linked role ARN would not work correctly for organization-wide AWS Config Conformance Packs [1]. The policy needs to allow access from Config service-linked roles across all accounts in the organization.
              # AWS: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/config-conforms.amazonaws.com/AWSServiceRoleForConfigConforms
            Condition:
              StringEquals:
                aws:PrincipalOrgID: ${aws:PrincipalOrgID}
              ArnLike:
                aws:PrincipalArn: !Sub "arn:${AWS::Partition}:iam::*:role/aws-service-role/config-conforms.amazonaws.com/AWSServiceRoleForConfigConforms"
              Bool:
                aws:SecureTransport: true
          - Sid: AWSConfigConformsReadWriteBucket
            Action:
              - s3:PutObject
              - s3:GetObject
            Effect: Allow
            Resource: !Sub ${DeliveryS3Bucket.Arn}/*
            Principal:
              Service: config.amazonaws.com
            Condition:
              StringEquals:
                aws:PrincipalOrgID: ${aws:PrincipalOrgID}
              ArnLike:
                aws:PrincipalArn: !Sub "arn:${AWS::Partition}:iam::*:role/aws-service-role/config-conforms.amazonaws.com/AWSServiceRoleForConfigConforms"
              Bool:
                aws:SecureTransport: true

  # -------------------------------------------------------------------------------------------------------------------------------------
  # Lambda function that checks if the AWS Config Delegated Admin account has the AWSCloudFormationStackSetExecutionRole
  # -------------------------------------------------------------------------------------------------------------------------------------
  
  # In each target account, create a service role named AWSCloudFormationStackSetExecutionRole that trusts the administrator account. 
  # The role must have this exact name. You can do this by creating a stack from the CloudFormation template available from 
  # https://s3.amazonaws.com/cloudformation-stackset-sample-templates-us-east-1/AWSCloudFormationStackSetExecutionRole.yml. 
  # When you use this template, you are prompted to provide the account ID of the administrator account with which your target account must have a trust relationship.
  
  # Lambda role for checking if execution role exists

  # -------------------------------------------------------------------------------------------------------------------------------------
  # StackSets to install the conformance pack
  # -------------------------------------------------------------------------------------------------------------------------------------

  # TODO prerequisites
  # To deploy this template, you'll need to create the necessary IAM roles for self-managed StackSets first - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html 
  # Here are the required roles:
  #    AWSCloudFormationStackSetAdministrationRole
  #    AWSCloudFormationStackSetExecutionRole
  #
  # when using self-managed permissions for StackSets, the administration role (AWSCloudFormationStackSetAdministrationRole) must be in the management account, not in the delegated administrator account [1].

  # TODO 
  # PermissionModel
  # Describes how the IAM roles required for stack set operations are created.
  # With SELF_MANAGED permissions, you must create the administrator and execution roles required to deploy to target accounts. 
  #   For more information, see Grant self-managed permissions in the AWS CloudFormation User Guide.
  #   https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html
  # With SERVICE_MANAGED permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by AWS Organizations. 
  #   For more information, see Activate trusted access for stack sets with AWS Organizations in the AWS CloudFormation User Guide.
  #   https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-activate-trusted-access.html
  #
  # The permission model works as follows
  #
  # SELF_MANAGED:
  #   Must be run from the management account
  #   Requires AWSCloudFormationStackSetAdministrationRole in management account
  #   Requires AWSCloudFormationStackSetExecutionRole in target accounts
  #
  # If you use SELF_MANAGED, the template must be deployed from the management account, regardless of who is the delegated administrator 
  #
  # SERVICE_MANAGED with DELEGATED_ADMIN [2]:
  #   Can be run from the delegated admin account
  #   Uses Organizations service-linked roles
  #   No need for additional IAM roles
  # 
  # If you want to run from the delegated admin account, you must use:
  # PermissionModel: SERVICE_MANAGED
  # CallAs: DELEGATED_ADMIN



  ConformancePackStackSet:
    Type: AWS::CloudFormation::StackSet
    Properties:
      PermissionModel: SELF_MANAGED
      StackSetName: config-conformance-pack
      Description: "Deploys AWS Config Conformance Pack across regions"
      # TODO for now named crcd-cirt-security-recommendations2 - then delete the three CFN deployed on the Security Tooling account in the EU regions and rename this
      # TODO when renaming also replace the entire template, here is just a subset
      TemplateBody: |
        AWSTemplateFormatVersion: '2010-09-09'
        Description: 'Deploys AWS Config Conformance Pack across regions'

        Parameters:
          ExcludedAccounts:
            Type: CommaDelimitedList
            Description: "Comma-separated list of account IDs to exclude from conformance pack deployment"
            Default: ""

        Resources:
          OrganizationConformancePack:
            Type: 'AWS::Config::OrganizationConformancePack'
            Properties:
              OrganizationConformancePackName: 'crcd-cirt-security-recommendations2'
              DeliveryS3Bucket: !Sub 'awsconfigconforms-crcd-cirt-${AWS::AccountId}'
              ExcludedAccounts: !Ref ExcludedAccounts
              Description: "Organization-wide conformance pack implementing CIRT security recommendations"
              TemplateBody: |
                ConformancePackName: crcd-cirt-security-recommendations
                Description: "Conformance pack for comprehensive security controls recommended by AWS Customer Incident Response Team (CIRT)"
                
                Parameters:
                  ApiGatewayEndpointTypes:
                    Type: String
                    Default: "PRIVATE,REGIONAL"
                    Description: "Allowed API Gateway endpoint types (EDGE, REGIONAL, PRIVATE)"
                
                Resources:
                  RootAccountHardwareMFAEnabled:
                  Type: AWS::Config::ConfigRule
                  Properties:
                    ConfigRuleName: crcd-cirt-root-account-hardware-mfa-enabled
                    Source:
                      Owner: AWS
                      SourceIdentifier: ROOT_ACCOUNT_HARDWARE_MFA_ENABLED
                    MaximumExecutionFrequency: TwentyFour_Hours

                RootAccountMFAEnabled:
                  Type: AWS::Config::ConfigRule
                  Properties:
                    ConfigRuleName: crcd-cirt-root-account-mfa-enabled
                    Source:
                      Owner: AWS
                      SourceIdentifier: ROOT_ACCOUNT_MFA_ENABLED
                    MaximumExecutionFrequency: TwentyFour_Hours

                IAMRootAccessKeyCheck:
                  Type: AWS::Config::ConfigRule
                  Properties:
                    ConfigRuleName: crcd-cirt-iam-root-access-key-check
                    Source:
                      Owner: AWS
                      SourceIdentifier: IAM_ROOT_ACCESS_KEY_CHECK
                    MaximumExecutionFrequency: TwentyFour_Hours

                IAMUserMFAEnabled:
                  Type: AWS::Config::ConfigRule
                  Properties:
                    ConfigRuleName: crcd-cirt-iam-user-mfa-enabled
                    Source:
                      Owner: AWS
                      SourceIdentifier: IAM_USER_MFA_ENABLED

                MFAEnabledForIAMConsoleAccess:
                  Type: AWS::Config::ConfigRule
                  Properties:
                    ConfigRuleName: crcd-cirt-mfa-enabled-for-iam-console-access
                    Source:
                      Owner: AWS
                      SourceIdentifier: MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS

                AutoscalingLaunchConfigRequiresIMDSv2:
                  Type: AWS::Config::ConfigRule
                  Properties:
                    ConfigRuleName: crcd-cirt-autoscaling-launchconfig-requires-imdsv2
                    Source:
                      Owner: AWS
                      SourceIdentifier: AUTOSCALING_LAUNCH_CONFIG_PUBLIC_IP_DISABLED

                EC2IMDSv2Check:
                  Type: AWS::Config::ConfigRule
                  Properties:
                    ConfigRuleName: crcd-cirt-ec2-imdsv2-check
                    Source:
                      Owner: AWS
                      SourceIdentifier: EC2_IMDSV2_CHECK

                EC2LaunchTemplateIMDSv2Check:
                  Type: AWS::Config::ConfigRule
                  Properties:
                    ConfigRuleName: crcd-cirt-ec2-launch-template-imdsv2-check
                    Source:
                      Owner: AWS
                      SourceIdentifier: EC2_LAUNCH_TEMPLATE_IMDSV2_CHECK

      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              # TODO this gets the local account !Ref AWS::AccountId
              - !Ref ConfigDelegatedAdminAccount 
          Regions: !Ref Regions  # Use the Regions parameter here
            # - us-east-1
            # - us-east-2
            # - us-west-1
            # - us-west-2
            # Add all regions you need TODO get from parameters
        
Outputs:
  BucketName:
    Description: Name of the created S3 bucket
    Value: !Ref DeliveryS3Bucket
  BucketArn:
    Description: ARN of the created S3 bucket
    Value: !GetAtt DeliveryS3Bucket.Arn
  StackSetId:
    Description: ID of the created StackSet
    Value: !Ref ConformancePackStackSet
