# Supporting Lambda function
# cid-crcd-supportinglambda
# WIP to see if this is needed, lambda taken from https://github.com/aws-samples/aws-cudos-framework-deployment/blob/main/cfn-templates/cid-cfn.yml
# Need to find out the region where QuickSight stores users. I will deploy this lambda and run it once to know a parameter to be used later
# eventually will try to integrate this lambda in the CloudFormation template, as I THINK (TBC) it works on the original

# Once deployed, run this lambda with a dummy test event, leave the test event JSON as default, it will not be used

# Sample output of the lambda
# -----
# Function Logs
# START RequestId: e14cbe15-374e-4a5f-a089-c887fdf07ce8 Version: $LATEST
# {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}
# QuickSight identity region: eu-west-1
# {'Status': 'SUCCESS', 'Reason': 'In case of error check logs\nLogs: https://eu-west-3.console.aws.amazon.com/cloudwatch/home?region=eu-west-3#logEvent:group=/aws/lambda/CidCrCdCustomResourceFunctionInit;stream=2024/04/08/[$LATEST]78207c6be11c40f896153fa022a8aeae', 'PhysicalResourceId': 'keep_it_constant', 'StackId': None, 'RequestId': None, 'LogicalResourceId': None, 'NoEcho': False, 'Data': {'Reason': 'In case of error check logs', 'uuid': 'fb571416-f587-11ee-95a4-f7ce18daba56', 'IdentityRegion': 'eu-west-1'}}
# END RequestId: e14cbe15-374e-4a5f-a089-c887fdf07ce8
# -----
# write down the region reported in the line that begins with: "QuickSight identity region" use the region on the next CloudFormation template


AWSTemplateFormatVersion: '2010-09-09'
Description: Need to find out the region where QuickSight stores users. I will deploy this lambda and run it once to know a parameter to be used later. Eventually will try to integrate this lambda in the CloudFormation template, as I THINK (TBC) it works on the original

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Common Parameters'
        Parameters:
          - QuickSightUser
      - Label:
          default: 'Technical Parameters. Please do not change.'
        Parameters:
          - LambdaLayerBucketPrefix

    ParameterLabels:
      QuickSightUser:
        default: "User name of QuickSight user (as displayed in QuickSight admin panel)."
      LambdaLayerBucketPrefix:
        default: "LambdaLayerBucketPrefix - Please do not change"

Parameters:
  QuickSightUser:
    Type: String
    MinLength: 1
    Default: REPLACE WITH QuickSight USER
    Description: See https://quicksight.aws.amazon.com/sn/admin#users

  LambdaLayerBucketPrefix:
    Type: String
    Description: An S3 bucket with a Lambda layer
    Default: "aws-managed-cost-intelligence-dashboards"

Resources:

  # TODO probably not needed / these policies were used by the original lambda, I just want to know one thing
  # InitLambdaExecutionRoleWorkGroupPolicy, InitLambdaExecutionRoleBucketPolicy, InitLambdaExecutionRoleStartCrawlerPolicy

  InitLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: cid-crcd-supportingLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: quicksight:DescribeUser
                Resource: !Sub 'arn:${AWS::Partition}:quicksight:*:${AWS::AccountId}:user/default/${QuickSightUser}' # region=* as at this moment we do not know the Identity region where QS stores users
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AWSLambdaExecute

  # this layer has the code to extract the QuickSight user, so I need it
  CidResourceLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: 'CidCrcdLambdaLayer'
      Description: An AWS managed layer with a cid-cmd package installed
      Content:
        S3Bucket: !Sub '${LambdaLayerBucketPrefix}-${AWS::Region}'
        S3Key: 'cid-resource-lambda-layer/cid-0.2.46.zip' #replace version here if needed
      CompatibleRuntimes:
        - python3.10

  CustomResourceFunctionInit:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "CidCrCdCustomResourceFunctionInit"
      Role: !GetAtt 'InitLambdaExecutionRole.Arn'
      Description: "Do what CFN cannot: start crawler, delete bucket with objects and delete an non empty workgroup"
      Runtime: python3.12
      Architectures: [ x86_64 ] #Compatible with arm64 but it is not supported in all regions
      MemorySize: 128
      Timeout: 300
      Handler: 'index.lambda_handler'
      Code:
        ZipFile: |
          import os
          import uuid
          import json
          import boto3
          import botocore
          import urllib3

          from cid.helpers import QuickSight # from layer
          from cid.utils import set_parameters


          QUICKSIGHT_USER = os.environ['QUICKSIGHT_USER']

          def lambda_handler(event, context):
              print(event)

              region = boto3.session.Session().region_name
              res = (True, f"In case of error check logs")
              identity_region = ''
              try:
                  set_parameters({'quicksight-user': QUICKSIGHT_USER})
                  identity_region = get_identity_region()
                  
                  print("QuickSight identity region: " + identity_region)
                  
                  
              finally:
                  log_url = f"https://{region}.console.aws.amazon.com/cloudwatch/home?region={region}#logEvent:group={context.log_group_name};stream={context.log_stream_name}"
                  url = event.get('ResponseURL')
                  body = {}
                  body['Status'] = 'SUCCESS' if res[0] else 'FAILED'
                  body['Reason'] = res[1] + '\nLogs: ' + log_url
                  body['PhysicalResourceId'] = 'keep_it_constant'
                  body['StackId'] = event.get('StackId')
                  body['RequestId'] = event.get('RequestId')
                  body['LogicalResourceId'] = event.get('LogicalResourceId')
                  body['NoEcho'] = False
                  body['Data'] =  {'Reason': res[1], 'uuid': str(uuid.uuid1()), 'IdentityRegion': identity_region}
                  print(body)
                  if not url: return
                  json_body=json.dumps(body)
                  try:
                      http = urllib3.PoolManager()
                      response = http.request('PUT', url, body=json_body, headers={'content-type' : '', 'content-length' : str(len(json_body))}, retries=False)
                      print(f"Status code: {response}")
                  except Exception as exc:
                      print("Failed sending PUT to CFN: " + str(exc))

          def get_identity_region():
              qs = QuickSight(boto3.session.Session())
              return qs.identityRegion

      Layers:
        - !Ref CidResourceLambdaLayer
      Environment:
        Variables:
          QUICKSIGHT_USER: !Ref QuickSightUser
