# Single CloudFormation template for all resources
AWSTemplateFormatVersion: '2010-09-09'
Description: "CID-CRCD - Deployment of AWS Config Resource Compliance Dashboard (CRCD) v2"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "QuickSight"
        Parameters:
            - PQuickSightUser
      -
        Label:
          default: "AWS Config Logging"
        Parameters:
          - PConfigLoggingBucket
          - PConfigLoggingAccountID
      -
        Label:
          default: "Athena Configuration (DO NOT CHANGE)"
        Parameters:
          - PAthenaWorkgroup
          - PAthenaDataSource
          - PAthenaDatabase
          - PAthenaTable
          - PAthenaQueryResultBucketPrefix
          - PQuickSightDataSource
      
    ParameterLabels:
      PAthenaWorkgroup:
        default: "Athena workgroup"
      PAthenaDataSource:
        default: "Athena data source"
      PAthenaDatabase:
        default: "Athena database"
      PAthenaQueryResultBucketPrefix:
        default: "Prefix of the Athena query results bucket"
      PAthenaTable:
        default: "Athena table for AWS Config data"
      PConfigLoggingBucket:
        default: "AWS Config bucket"
      PConfigLoggingAccountID:
        default: "Config bucket account"
      PQuickSightUser:
        default: "User name of QuickSight user (as displayed in QuickSight admin panel)"
      PQuickSightDataSource:
        default: "QuickSight data source"
      

# TODO test the rules on the parameters, that they are mandatory etc...
Parameters:
  PQuickSightUser:
    Type: String
    MinLength: 1
    Default: "Replace with QuickSight user"
    Description: See https://quicksight.aws.amazon.com/sn/admin#users

  PConfigLoggingBucket:
    Type: "String"
    Default: "your-config-bucket"
    Description: "Name of the Amazon S3 bucket that collects AWS Config data (Required)"
    AllowedPattern: '^[a-z0-9][a-z0-9-]{1,61}[a-z0-9]$'
    ConstraintDescription: "Required"
  
  PConfigLoggingAccountID:
    Type: "String"
    Default: "123412341234"
    Description: "AWS Account ID that contains the bucket holding AWS Config snapshots (Required)"
    MaxLength: 12
    MinLength: 12
    AllowedPattern: '^\d{12}$'
    ConstraintDescription: "Required"

  PAthenaDataSource:
    Type: "String"
    Default: "CidCrcdDataCatalog" # TODO was "cid-crcd-datasource" but I want to follow the stype of the default AwsDataCatalog
    Description: "The Athena data source that will be used by the CID-CRCD dashboard (Required)"
    MinLength: 1
    ConstraintDescription: "Required"

  PAthenaDatabase:
    Type: "String"
    # The name cannot have the symbol '-' and must have lowercase character. '_' seems accepted
    Default: "cid_crcd_database"
    Description: "The Athena/Glue database for the CID-CRCD dashboard (Required)"
    MinLength: 1
    ConstraintDescription: "Required"

  PAthenaQueryResultBucketPrefix:
    Type: "String"
    Default: "cid-crcd-athena-query-results" #It is not possible in the default value of a parameter to add variables like ${AWS::Region} or ${AWS::AccountId}" 
    Description: "The Athena query result bucket for the workgroup, Account ID and Region will be added to the name by this tempalte (Required)"
    # 64 characters in the bucket name, but automatically the template will add 2 dashes, 12 digit account number and region up to 14 characters ap-southeast-4, ap-northeast-1
    # that leaves 36 character for the prefix
    AllowedPattern: '^[a-z0-9][a-z0-9-]{1,33}[a-z0-9]$'
    ConstraintDescription: "Required"

  PAthenaWorkgroup:
    Type: "String"
    Default: "cid-crcd-dashboard"
    Description: "The Athena workgroup for the CID-CRCD dashboard (Required)"
    MinLength: 1
    ConstraintDescription: "Required"

  PAthenaTable:
    Type: "String"
    Default: "cid-crcd-config"
    Description: "The Athena table that contains the AWS Config data for the dashboard (Required)"
    MinLength: 1
    ConstraintDescription: "Required"
  
  PQuickSightDataSource:
    Type: "String"
    Default: "cid-crcd-qs-datasource" 
    Description: "The QuickSight data source for the Data Sets of the CID-CRCD dashboard (Required)"
    MinLength: 1
    ConstraintDescription: "Required"

# TODO verify parameters are not the default ones in case user input is necessary (e.g. QuickSight user, Config S3 bucket, Config buicket account)
Rules:
  MandatoryQuickSightUser:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PQuickSightUser
          - ''
        AssertDescription: "QuickSight user is required"
  MandatoryAthenaDataSource:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PAthenaDataSource
          - ''
        AssertDescription: "Athena data source is required"
  MandatoryQuickSightDataSource:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PQuickSightDataSource
          - ''
        AssertDescription: "QuickSight data source is required"
  MandatoryConfigLoggingBucket:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PConfigLoggingBucket
          - ''
        AssertDescription: "Config bucket name is required"
  MandatoryConfigLoggingAccountID:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PConfigLoggingAccountID
          - ''
        AssertDescription: "Config bucket account is required"
  MandatoryAthenaDatabase:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PAthenaDatabase
          - ''
        AssertDescription: "Athena database is required"
  MandatoryAthenaQueryResultBucketPrefix:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PAthenaQueryResultBucketPrefix
          - ''
        AssertDescription: "Athena query result bucket is required"
  MandatoryAthenaWorkgroup:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PAthenaWorkgroup
          - ''
        AssertDescription: "Athena workgroup is required"
  MandatoryAthenaTable:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PAthenaTable
          - ''
        AssertDescription: "Athena table name is required"

Resources:
  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      DatabaseInput:
        Description: "Database for AWS Config Resource Compliance Dashboard (CID-CRCD)"
        Name: !Sub "${PAthenaDatabase}"
      # The AWS account ID for the account in which to create the catalog object.
      CatalogId: !Sub '${AWS::AccountId}'

  AthenaQueryResultBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${PAthenaQueryResultBucketPrefix}-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: BucketOwnerFullControl
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContent
            Status: 'Enabled'
            ExpirationInDays: 7
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            # TODO this is copied from CID CloudFormation template
            - W3045 # Consider using AWS::S3::BucketPolicy instead of AccessControl; standard Athena results setup

  # Athena workgroup to execute CID-CRCD queries with its own result bucket
  # Using RecursiveDeleteOption - The option to delete a workgroup and its contents even if the workgroup contains any named queries. The default is false.
  AthenaWorkgroup: 
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: !Sub '${PAthenaWorkgroup}'
      Description: 'Used by AWS Config Resource Compliance Dashboard (CRCD)'
      RecursiveDeleteOption: True 
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: true
        ResultConfiguration:
          EncryptionConfiguration:
            EncryptionOption: SSE_S3
          OutputLocation: !Sub 's3://${AthenaQueryResultBucket}/'

  IAMRoleQuickSightDataSource:
    Type: AWS::IAM::Role
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Description: "CID-CRCD Dashboard - Allows QuickSight datasource access to Athena/Glue and the underlying S3 bucket that contains AWS Config snapshots"
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - Ref: "IAMManagedPolicyGlueAthenaS3"
      MaxSessionDuration: 3600
      # TODO this is replicated in the output, is there a way to make a reference?
      RoleName: !Sub "cid-crcd-quicksight-datasource-role-${AWS::Region}-${AWS::AccountId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "quicksight.amazonaws.com"

  IAMManagedPolicyGlueAthenaS3:
    Type: AWS::IAM::ManagedPolicy
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "cid-crcd-glue-s3configsnapshotobject-policy-${AWS::Region}-${AWS::AccountId}"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that allows QuickSight to access Glue, Athena and the Config S3 bucket"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource: "*"
          Action:
          - "lakeformation:GetDataAccess"
          - "athena:ListDataCatalogs"
          - "athena:ListDatabases"
          - "athena:ListTableMetadata"
          Effect: "Allow"
          Sid: "ReadAthenaLakeFormation"
        - Resource:
          - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog"
          - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${PAthenaDatabase}"
          - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${PAthenaTable}/*"
          Action:
          - "glue:GetPartition"
          - "glue:GetPartitions"
          - "glue:GetDatabases"
          - "glue:GetTable"
          - "glue:GetTables"
          Effect: "Allow"
          Sid: "AccessGlueData"
        - Resource:
          - !Sub "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:datacatalog/${PAthenaDataSource}"
          - !Sub "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:database/${PAthenaDatabase}"
          - !Sub "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${PAthenaWorkgroup}"
          Action:
          - "athena:ListDatabases"
          - "athena:ListDataCatalogs"
          - "athena:ListDatabases"
          - "athena:GetQueryExecution"
          - "athena:GetQueryResults"
          - "athena:StartQueryExecution"
          - "athena:GetQueryResultsStream"
          - "athena:GetTableMetadata"
          Effect: "Allow"
          Sid: "AccessAthenaDatabaseWorkgroup"
        - Resource:
          - !Sub "arn:${AWS::Partition}:s3:::${AthenaQueryResultBucket}"
          - !Sub "arn:${AWS::Partition}:s3:::${AthenaQueryResultBucket}/*"
          Action:
          - "s3:GetBucketLocation"
          - "s3:ListBucket"
          - "s3:GetObject"
          - "s3:PutObject"
          - "s3:ListBucketMultipartUploads"
          - "s3:ListMultipartUploadParts"
          - "s3:AbortMultipartUpload"
          Effect: "Allow"
          Sid: "AllowReadAndWriteToAthenaQueryResultBucket"
        - Resource:
          - !Sub "arn:${AWS::Partition}:s3:::${PConfigLoggingBucket}"
          Action:
          - "s3:ListBucket"
          Effect: "Allow"
          Sid: "AllowListTheS3ConfigBucket"
        - Resource:
          - !Sub "arn:${AWS::Partition}:s3:::${PConfigLoggingBucket}/*"
          # TODO does not look like getObject needs also "arn:${AWS::Partition}:s3:::${PConfigLoggingBucket}"
          Action:
          - "s3:GetObject"
          - "s3:GetObjectVersion"
          Effect: "Allow"
          Sid: "AllowReadTheS3ConfigBucket"

  # TODO this creates a data source on quicksight, but not on Athena, that still has only AwsDataCatalog - understand data source in QS vs. Athena
  QuickSightDataSource:
    Type: AWS::QuickSight::DataSource
    Properties:
      AwsAccountId: !Sub '${AWS::AccountId}'
      Type: ATHENA
      DataSourceId: !Sub '${PQuickSightDataSource}' # An ID for the data source. This ID is unique per AWS Region for each AWS account. 
      Name: "CID Config Dashboard DataSource" #  !Sub '${PQuickSightDataSource}'
      DataSourceParameters:
        AthenaParameters:
          WorkGroup: !Ref AthenaWorkgroup
          RoleArn: 
            Fn::GetAtt:
              - "IAMRoleQuickSightDataSource"
              - "Arn"
      Permissions:
        - Actions:
            - 'quicksight:DescribeDataSource'
            - 'quicksight:DescribeDataSourcePermissions'
            - 'quicksight:PassDataSource'
            - 'quicksight:UpdateDataSource'
            - 'quicksight:DeleteDataSource'
            - 'quicksight:UpdateDataSourcePermissions'
          # TODO the region is the one where QuickSight stores the users, returned by a lambda which ATM I can deploy separately (Cloud formation cid-crcd-supportingfunctions.yaml) and run manually
          Principal: !Sub 'arn:${AWS::Partition}:quicksight:eu-north-1:${AWS::AccountId}:user/default/${PQuickSightUser}'
          # TODO check ${Setup.IdentityRegion} and why it was used originally - Looks like it was set by a lambda function called within the CloudFormation template or something????
          # using ${AWS::Region} does not work
          #     Resource handler returned message: "Invalid request provided: One or more principals in resource permissions list are not valid QuickSight users 
          #     (Service: QuickSight, Status Code: 400, Request ID: null)" (RequestToken: 97c30ba1-f45f-584c-419b-22075bb4d96e, HandlerErrorCode: InvalidRequest)
          # original string was Principal: !Sub 'arn:${AWS::Partition}:quicksight:${Setup.IdentityRegion}:${AWS::AccountId}:user/default/${PQuickSightUser}'

  # TODO from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-athena-datacatalog.html#cfn-athena-datacatalog-type
  # The GLUE type takes a catalog ID parameter and is required. The catalog_id is the account ID of the AWS account to which the Glue catalog belongs.
  # catalog-id=catalog_id
  # The GLUE data catalog type also applies to the default AwsDataCatalog that already exists in your account, of which you can have only one and cannot modify.
  # TODO Still unsure if I need my own Athena data catalog or if I can use the default AwsDataCatalog, and why CID/CUDOS creted its own
  
  # TODO this creates it on Athena, to be seen how (or if) it connects with everything else
  AthenaDataCatalogDataSource:
    Type: AWS::Athena::DataCatalog
    Properties:
      Type: GLUE
      Description: "CID-CRCD Athena data catalog used by the dashboard"
      Name: !Sub '${PAthenaDataSource}'
      Parameters:
        catalog-id: !Sub '${AWS::AccountId}'

  IAMManagedPolicyLambdaGlue:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "cid-crcd-glue-policy-${AWS::Region}-${AWS::AccountId}"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that gives Glue permissions to CID-CRCD Lambda execution role"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource:
          # TODO isn't the Athena TABLE and not DATABASE to be used? Maybe add these two? Or check permissions once installed.
          # - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${PAthenaDatabase}"
          # - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${PAthenaTable}/*"
          - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${PAthenaDatabase}/*"
          - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${PAthenaDatabase}"
          - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog"
          Action:
          - "glue:UpdatePartition"
          - "glue:GetTables"
          - "glue:GetTable"
          - "glue:GetPartitions"
          - "glue:GetPartition"
          - "glue:DeletePartition"
          - "glue:CreatePartition"
          - "glue:BatchGetPartition"
          - "glue:BatchDeletePartition"
          - "glue:BatchCreatePartition"
          Effect: "Allow"
          Sid: "GluePartitions"

  IAMManagedPolicyLambdaS3AthenaQueryResults:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "cid-crcd-s3-athenaqueryresults-policy-${AWS::Region}-${AWS::AccountId}"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that gives permissions on Athena query results S3 bucket to CID-CRCD Lambda execution role"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource:
          - !Sub "arn:${AWS::Partition}:s3:::${AthenaQueryResultBucket}"
          - !Sub "arn:${AWS::Partition}:s3:::${AthenaQueryResultBucket}/*"
          Action:
          - "s3:PutObject"
          - "s3:ListMultipartUploadParts"
          - "s3:ListBucket"
          - "s3:GetObject"
          - "s3:GetBucketLocation"
          Effect: "Allow"
          Sid: "S3AthenaQueryResults"

  IAMManagedPolicyLambdaS3ConfigSnapshotObject:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "cid-crcd-s3-configsnapshotobject-policy-${AWS::Region}-${AWS::AccountId}"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that allows CID-CRCD Lambda to receive objects from the Config S3 bucket"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource:
          - !Sub "arn:${AWS::Partition}:s3:::${PConfigLoggingBucket}/*"
          - !Sub "arn:${AWS::Partition}:s3:::${PConfigLoggingBucket}"
          Action:
          - "s3:GetObject"
          # TODO check what's really needed
          - "s3:ListBucket"
          - "s3:ListBucketVersions"
          - "s3:GetObjectVersion"
          - "s3:GetLifecycleConfiguration"
          Effect: "Allow"
          Sid: "S3ConfigSnapshotObject"

  IAMManagedPolicyLambdaCloudWatchLogs:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "cid-crcd-cloudwatch-logs-policy-${AWS::Region}-${AWS::AccountId}"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that gives CloudWatch Logs permissions to CID-CRCD Lambda execution role"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        # TODO keep the log group name the same as the lambda function, use a reference
        - Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cid-crcd-config-snapshot-partitioner:*"
          Action:
          - "logs:PutLogEvents"
          - "logs:CreateLogStream"
          - "logs:CreateLogGroup"
          Effect: "Allow"
          Sid: "CloudWatchLogGroup"

  IAMManagedPolicyLambdaAthena:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "cid-crcd-athena-policy-${AWS::Region}-${AWS::AccountId}"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that gives Athena permissions to CID-CRCD Lambda execution role"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource: !Sub "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${PAthenaWorkgroup}"
          Action:
          - "athena:StartQueryExecution"
          - "athena:GetQueryExecution"
          Effect: "Allow"
          Sid: "AthenaAccess"

  LambdaFunctionPartitionerConfig:
    Type: AWS::Lambda::Function
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      FunctionName: "cid-crcd-config-snapshot-partitioner"
      Description: "CID-CRCD Dashboard - Lambda function that adds partitions when there are new AWS Config Snapshots events"
      MemorySize: 128
      EphemeralStorage:
        Size: 512
      Timeout: 300
      Runtime: "python3.12"
      Architectures:
        - "x86_64"
      TracingConfig:
        Mode: "Active"
      VpcConfig:
        SecurityGroupIds: []
        SubnetIds: []
        Ipv6AllowedForDualStack: false
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      # TODO the file name from the code below will be called index.py once you open it in Lambda, this may change depending on how the final code is retrieved
      Handler: "index.lambda_handler"
      ReservedConcurrentExecutions: 1
      Role:
        Fn::GetAtt:
        - "IAMRoleLambdaPartitionerConfig"
        - "Arn"
      FileSystemConfigs: []
      LoggingConfig:
        LogFormat: "Text"
        # this is already by default LogGroup: "/aws/lambda/cid-crcd-config-snapshot-partitioner"
      Environment:
        Variables:
          ATHENA_DATABASE_NAME: !Ref PAthenaDatabase
          ATHENA_QUERY_RESULTS_BUCKET_NAME: !Ref AthenaQueryResultBucket # TODO DOES IT PASS THE RESOURCE? AthenaQueryResultBucketName
          ATHENA_WORKGROUP: !Ref PAthenaWorkgroup
          CONFIG_TABLE_NAME: !Ref PAthenaTable
          # TODO: Refactor the lambda code and remove this variable. It's the region where the function is deployed anyway
          ATHENA_REGION: !Ref AWS::Region
      Code:
        # TODO: handle the code
        ZipFile: | 
          import json
          import urllib.parse
          import boto3
          
          print('Loading function')
          s3 = boto3.client('s3')

          def lambda_handler(event, context):
            print("Received event: " + json.dumps(event, indent=2))
            
            # Get the object from the event and show its content type
            bucket = event['Records'][0]['s3']['bucket']['name']

            key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'], encoding='utf-8')

            try:
              response = s3.get_object(Bucket=bucket, Key=key)
              print("CONTENT TYPE: " + response['ContentType'])
              return response['ContentType']
            
            except Exception as e:
              print(e)
              print('Error getting object {} from bucket {}. Make sure they exist and your bucket is in the same region as this function.'.format(key, bucket))
              raise e
  
       

  IAMRoleLambdaPartitionerConfig:
    Type: AWS::IAM::Role
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Description: "CID-CRCD Dashboard - Allows to add partitions to Athena and Glue, send logs to Cloudwatch, access Athena query results S3 bucket, receive objects from Config bucket. Each defined in separate policies"
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - Ref: "IAMManagedPolicyLambdaAthena"
      - Ref: "IAMManagedPolicyLambdaGlue"
      - Ref: "IAMManagedPolicyLambdaS3AthenaQueryResults"
      - Ref: "IAMManagedPolicyLambdaCloudWatchLogs"
      - Ref: "IAMManagedPolicyLambdaS3ConfigSnapshotObject"
      MaxSessionDuration: 3600
      RoleName: !Sub "cid-crcd-lambda-partitioner-role-${AWS::Region}-${AWS::AccountId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
          Sid: "AllowLambdaAssumeRole"

  # Allows the S3 bucket that contains the Config Snapshots to invoke the lambda function
  LambdaInvocationPermissionLambdaPartitionerConfig:
    Type: AWS::Lambda::Permission
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "LambdaFunctionPartitionerConfig"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: !Sub "arn:${AWS::Partition}:s3:::${PConfigLoggingBucket}"
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref PConfigLoggingAccountID

Outputs:
  # TODO CID-CMD tool will list it, users must pick it. Maybe is enough to return just the name?
  # the tool can take the ARN as input parameter
  QuickSightDataRoleARN:
    Description: "ARN of the Role created for QuickSight"
    Value:
      Fn::GetAtt:
        - "IAMRoleQuickSightDataSource"
        - "Arn"

  # TODO returns arn:aws:athena:eu-west-3:767398072207:datacatalog/cid-crcd-datasource
  # This is coming from a permission I grant here
  # SEE IF IT IS NEEDED LATER
  AthenaDataCatalog:
    Description: "Possible value of the ARN, see what works"
    Value: !Sub "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:datacatalog/${PAthenaDataSource}"

  # TODO returns 767398072207|cid-crcd-datasource
  # SEE IF IT IS NEEDED LATER
  QuickSightDataSourceArnTwo:
    Description: "Alternative possibility"
    Value: !Ref QuickSightDataSource

  # TODO returns arn:aws:quicksight:eu-west-3:767398072207:datasource/cid-crcd-datasource
  # SEE IF IT IS NEEDED LATER
  QuickSightDataSourceArnThree:
    Description: "Further alternative possibility"
    Value:
      Fn::GetAtt:
        - "QuickSightDataSource"
        - "Arn"
  
  LambdaARN:
    Description: "ARN of the Lambda function supporting CID-CRCD Dashboard"
    Value:
      Fn::GetAtt:
        - "LambdaFunctionPartitionerConfig"
        - "Arn"

  LambdaRoleARN:
    Description: "ARN of the execution role of the lambda function"
    Value:
      Fn::GetAtt:
        - "IAMRoleLambdaPartitionerConfig"
        - "Arn"