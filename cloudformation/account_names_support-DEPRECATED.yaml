AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Account Data View Lambda function'

# Creates a view based on what source of account names there is
# TODO
# - get the tags as parameters
# - return a properly formatted string to pass the cid-cmd with those tags, e.g.
#   --tag-org1 = 'first tag' --tag-org2 = 'second tag' -- tag-org3 = 'third tag'
#   so that one can copy and paste it all on the cid-cmd
# - alternatively, you can also tage the first 4 tags as comma separated lis and generate the whole output from the CFN?
# - parameters to the Lambda: everything


Parameters:
  AthenaBucket:
    Type: String
    Description: 'S3 bucket for Athena query results'
  AthenaPrefix:
    Type: String
    Description: 'S3 prefix for Athena query results'
    Default: 'lambda-query-results/'

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AthenaGlueAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - athena:StartQueryExecution
                  - athena:GetQueryExecution
                  - glue:GetTable
                  - glue:GetTables
                  - glue:GetDatabase
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${AthenaBucket}
                  - !Sub arn:aws:s3:::${AthenaBucket}/*

  AccountDataViewFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import time

          def lambda_handler(event, context):
              # Initialize AWS clients
              athena = boto3.client('athena')
              glue = boto3.client('glue')
              
              # Configuration
              database = 'cid_crcd_database'
              view_name = 'account_data_view'
              output_location = 's3://${AthenaBucket}/${AthenaPrefix}'
              
              def execute_athena_query(query):
                  """Execute Athena query and wait for completion"""
                  try:
                      response = athena.start_query_execution(
                          QueryString=query,
                          QueryExecutionContext={'Database': database},
                          ResultConfiguration={'OutputLocation': output_location}
                      )
                      
                      query_execution_id = response['QueryExecutionId']
                      
                      # Wait for query to complete
                      while True:
                          query_status = athena.get_query_execution(QueryExecutionId=query_execution_id)
                          state = query_status['QueryExecution']['Status']['State']
                          
                          if state in ['SUCCEEDED', 'FAILED', 'CANCELLED']:
                              return state == 'SUCCEEDED'
                              
                          time.sleep(1)
                          
                  except Exception as e:
                      print(f"Error executing query: {str(e)}")
                      return False

              def check_table_exists(database_name, table_name):
                  """Check if table exists in Glue Data Catalog"""
                  try:
                      glue.get_table(DatabaseName=database_name, Name=table_name)
                      return True
                  except glue.exceptions.EntityNotFoundException:
                      return False
                  except Exception as e:
                      print(f"Error checking table existence: {str(e)}")
                      return False

              # Check which tables exist
              optimization_table_exists = check_table_exists('optimization_data', 'organization_data')
              account_map_exists = check_table_exists('cid_cur', 'account_map')
              
              # Prepare CREATE OR REPLACE VIEW query based on table existence
              if optimization_table_exists:
                  create_view_query = f"""
                  CREATE OR REPLACE VIEW {database}.{view_name} AS
                  SELECT 
                      id as account_id,
                      arn as account_arn,
                      email as account_email,
                      name as account_name,
                      parentid as parent_id
                  FROM "optimization_data"."organization_data"
                  """
              elif account_map_exists:
                  create_view_query = f"""
                  CREATE OR REPLACE VIEW {database}.{view_name} AS
                  SELECT 
                      account_id,
                      'ARN' as account_arn,
                      'EMAIL' as account_email,
                      account_name,
                      parent_account_id as parent_id
                  FROM "cid_cur"."account_map"
                  """
              else:
                  create_view_query = f"""
                  CREATE OR REPLACE VIEW {database}.{view_name} AS
                  SELECT 
                      'NO_TABLES_EXIST' as account_id,
                      'NO_TABLES_EXIST' as account_arn,
                      'NO_TABLES_EXIST' as account_email,
                      'NO_TABLES_EXIST' as account_name,
                      'NO_TABLES_EXIST' as parent_id
                  WHERE false
                  """

              # Execute the view creation query
              success = execute_athena_query(create_view_query)
              
              return {
                  'statusCode': 200 if success else 500,
                  'body': {
                      'message': 'View created successfully' if success else 'Failed to create view',
                      'optimization_table_exists': optimization_table_exists,
                      'account_map_exists': account_map_exists,
                      'view_name': f"{database}.{view_name}"
                  }
              }
      Runtime: python3.9
      Timeout: 300
      MemorySize: 128
      Environment:
        Variables:
          ATHENA_BUCKET: !Ref AthenaBucket
          ATHENA_PREFIX: !Ref AthenaPrefix

  # EventBridge rule to trigger the Lambda function periodically
  LambdaScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Schedule for Account Data View Lambda function"
      ScheduleExpression: "rate(1 hour)"  # Adjust as needed
      State: ENABLED
      Targets:
        - Arn: !GetAtt AccountDataViewFunction.Arn
          Id: "AccountDataViewSchedule"

  # Permission for EventBridge to invoke the Lambda function
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AccountDataViewFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt LambdaScheduleRule.Arn

Outputs:
  LambdaFunctionArn:
    Description: "ARN of the Lambda function"
    Value: !GetAtt AccountDataViewFunction.Arn
  LambdaFunctionName:
    Description: "Name of the Lambda function"
    Value: !Ref AccountDataViewFunction
