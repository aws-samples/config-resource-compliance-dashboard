# Same as the official cid-crcd-resources.yaml, but with full code of lambda partitioner
# Single CloudFormation template for all resources
AWSTemplateFormatVersion: '2010-09-09'
Description: "CID-CRCD - Deployment of AWS Config Resource Compliance Dashboard (CRCD) v2"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "QuickSight"
        Parameters:
            - PQuickSightUser
      -
        Label:
          default: "AWS Config Logging"
        Parameters:
          - PConfigLoggingBucket
          - PConfigLoggingAccountID
      -
        Label:
          default: "Athena Configuration (DO NOT CHANGE)"
        Parameters:
          - PAthenaWorkgroup
          - PAthenaDataSource
          - PAthenaDatabase
          - PAthenaTable
          - PAthenaQueryResultBucketPrefix
          - PQuickSightDataSource
      -
        Label:
          default: "Technical Parameters (DO NOT CHANGE)"
        Parameters:
          - LambdaLayerBucketPrefix
      
    ParameterLabels:
      PAthenaWorkgroup:
        default: "Athena workgroup"
      PAthenaDataSource:
        default: "Athena data source"
      PAthenaDatabase:
        default: "Athena database"
      PAthenaQueryResultBucketPrefix:
        default: "Prefix of the Athena query results bucket"
      PAthenaTable:
        default: "Athena table for AWS Config data"
      PConfigLoggingBucket:
        default: "AWS Config bucket"
      PConfigLoggingAccountID:
        default: "Config bucket account"
      PQuickSightUser:
        default: "User name of QuickSight user (as displayed in QuickSight admin panel)"
      PQuickSightDataSource:
        default: "QuickSight data source"
      LambdaLayerBucketPrefix:
        default: "LambdaLayerBucketPrefix - Please do not change"
      

# TODO test the rules on the parameters, that they are mandatory etc...
Parameters:
  LambdaLayerBucketPrefix:
    Type: String
    Description: "An S3 bucket with a Lambda layer used by CID-CRCD dashboard"
    Default: "aws-managed-cost-intelligence-dashboards"

  PQuickSightUser:
    Type: String
    MinLength: 1
    Default: "Replace with QuickSight user"
    Description: See https://quicksight.aws.amazon.com/sn/admin#users

  PConfigLoggingBucket:
    Type: "String"
    Default: "your-config-bucket"
    Description: "Name of the Amazon S3 bucket that collects AWS Config data (Required)"
    AllowedPattern: '^[a-z0-9][a-z0-9-]{1,61}[a-z0-9]$'
    ConstraintDescription: "Required"
  
  PConfigLoggingAccountID:
    Type: "String"
    Default: "123412341234"
    Description: "AWS Account ID that contains the bucket holding AWS Config snapshots (Required)"
    MaxLength: 12
    MinLength: 12
    AllowedPattern: '^\d{12}$'
    ConstraintDescription: "Required"

  PAthenaDataSource:
    Type: "String"
    Default: "CidCrcdDataCatalog" # TODO was "cid-crcd-datasource" but I want to follow the stype of the default AwsDataCatalog
    Description: "The Athena data source that will be used by the CID-CRCD dashboard (Required)"
    MinLength: 1
    ConstraintDescription: "Required"

  PAthenaDatabase:
    Type: "String"
    # The name cannot have the symbol '-' and must have lowercase character. '_' seems accepted
    Default: "cid_crcd_database"
    Description: "The Athena/Glue database for the CID-CRCD dashboard (Required)"
    MinLength: 1
    ConstraintDescription: "Required"

  PAthenaQueryResultBucketPrefix:
    Type: "String"
    Default: "cid-crcd-athena-query-results" #It is not possible in the default value of a parameter to add variables like ${AWS::Region} or ${AWS::AccountId}" 
    Description: "The Athena query result bucket for the workgroup, Account ID and Region will be added to the name by this tempalte (Required)"
    # 64 characters in the bucket name, but automatically the template will add 2 dashes, 12 digit account number and region up to 14 characters ap-southeast-4, ap-northeast-1
    # that leaves 36 character for the prefix
    AllowedPattern: '^[a-z0-9][a-z0-9-]{1,33}[a-z0-9]$'
    ConstraintDescription: "Required"

  PAthenaWorkgroup:
    Type: "String"
    Default: "cid-crcd-dashboard"
    Description: "The Athena workgroup for the CID-CRCD dashboard (Required)"
    MinLength: 1
    ConstraintDescription: "Required"

  PAthenaTable:
    Type: "String"
    Default: "cid-crcd-config"
    Description: "The Athena table that contains the AWS Config data for the dashboard (Required)"
    MinLength: 1
    ConstraintDescription: "Required"
  
  PQuickSightDataSource:
    Type: "String"
    Default: "cid-crcd-qs-datasource" 
    Description: "The QuickSight data source for the Data Sets of the CID-CRCD dashboard (Required)"
    MinLength: 1
    ConstraintDescription: "Required"

# TODO verify parameters are not the default ones in case user input is necessary (e.g. QuickSight user, Config S3 bucket, Config buicket account)
Rules:
  MandatoryQuickSightUser:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PQuickSightUser
          - ''
        AssertDescription: "QuickSight user is required"
  MandatoryAthenaDataSource:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PAthenaDataSource
          - ''
        AssertDescription: "Athena data source is required"
  MandatoryQuickSightDataSource:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PQuickSightDataSource
          - ''
        AssertDescription: "QuickSight data source is required"
  MandatoryConfigLoggingBucket:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PConfigLoggingBucket
          - ''
        AssertDescription: "Config bucket name is required"
  MandatoryConfigLoggingAccountID:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PConfigLoggingAccountID
          - ''
        AssertDescription: "Config bucket account is required"
  MandatoryAthenaDatabase:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PAthenaDatabase
          - ''
        AssertDescription: "Athena database is required"
  MandatoryAthenaQueryResultBucketPrefix:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PAthenaQueryResultBucketPrefix
          - ''
        AssertDescription: "Athena query result bucket is required"
  MandatoryAthenaWorkgroup:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PAthenaWorkgroup
          - ''
        AssertDescription: "Athena workgroup is required"
  MandatoryAthenaTable:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PAthenaTable
          - ''
        AssertDescription: "Athena table name is required"

Resources:
  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      DatabaseInput:
        Description: "Database for AWS Config Resource Compliance Dashboard (CID-CRCD)"
        Name: !Sub "${PAthenaDatabase}"
      # The AWS account ID for the account in which to create the catalog object.
      CatalogId: !Sub '${AWS::AccountId}'

  AthenaQueryResultBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${PAthenaQueryResultBucketPrefix}-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: BucketOwnerFullControl
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContent
            Status: 'Enabled'
            ExpirationInDays: 7
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            # TODO this is copied from CID CloudFormation template
            - W3045 # Consider using AWS::S3::BucketPolicy instead of AccessControl; standard Athena results setup

  # Athena workgroup to execute CID-CRCD queries with its own result bucket
  # Using RecursiveDeleteOption - The option to delete a workgroup and its contents even if the workgroup contains any named queries. The default is false.
  AthenaWorkgroup: 
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: !Sub '${PAthenaWorkgroup}'
      Description: 'Used by AWS Config Resource Compliance Dashboard (CRCD)'
      RecursiveDeleteOption: True 
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: true
        ResultConfiguration:
          EncryptionConfiguration:
            EncryptionOption: SSE_S3
          OutputLocation: !Sub 's3://${AthenaQueryResultBucket}/'

  IAMRoleQuickSightDataSource:
    Type: AWS::IAM::Role
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Description: "CID-CRCD Dashboard - Allows QuickSight datasource access to Athena/Glue and the underlying S3 bucket that contains AWS Config snapshots"
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - Ref: "IAMManagedPolicyGlueAthenaS3"
      MaxSessionDuration: 3600
      # TODO this is replicated in the output, is there a way to make a reference?
      RoleName: !Sub "cid-crcd-quicksight-datasource-role-${AWS::Region}-${AWS::AccountId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "quicksight.amazonaws.com"

  IAMManagedPolicyGlueAthenaS3:
    Type: AWS::IAM::ManagedPolicy
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "cid-crcd-glue-s3configsnapshotobject-policy-${AWS::Region}-${AWS::AccountId}"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that allows QuickSight to access Glue, Athena and the Config S3 bucket"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource: "*"
          Action:
          - "lakeformation:GetDataAccess"
          - "athena:ListDataCatalogs"
          - "athena:ListDatabases"
          - "athena:ListTableMetadata"
          Effect: "Allow"
          Sid: "ReadAthenaLakeFormation"
        - Resource:
          - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog"
          - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${PAthenaDatabase}"
          - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${PAthenaTable}/*"
          Action:
          - "glue:GetPartition"
          - "glue:GetPartitions"
          - "glue:GetDatabases"
          - "glue:GetTable"
          - "glue:GetTables"
          Effect: "Allow"
          Sid: "AccessGlueData"
        - Resource:
          - !Sub "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:datacatalog/${PAthenaDataSource}"
          - !Sub "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:database/${PAthenaDatabase}"
          - !Sub "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${PAthenaWorkgroup}"
          Action:
          - "athena:ListDatabases"
          - "athena:ListDataCatalogs"
          - "athena:ListDatabases"
          - "athena:GetQueryExecution"
          - "athena:GetQueryResults"
          - "athena:StartQueryExecution"
          - "athena:GetQueryResultsStream"
          - "athena:GetTableMetadata"
          Effect: "Allow"
          Sid: "AccessAthenaDatabaseWorkgroup"
        - Resource:
          - !Sub "arn:${AWS::Partition}:s3:::${AthenaQueryResultBucket}"
          - !Sub "arn:${AWS::Partition}:s3:::${AthenaQueryResultBucket}/*"
          Action:
          - "s3:GetBucketLocation"
          - "s3:ListBucket"
          - "s3:GetObject"
          - "s3:PutObject"
          - "s3:ListBucketMultipartUploads"
          - "s3:ListMultipartUploadParts"
          - "s3:AbortMultipartUpload"
          Effect: "Allow"
          Sid: "AllowReadAndWriteToAthenaQueryResultBucket"
        - Resource:
          - !Sub "arn:${AWS::Partition}:s3:::${PConfigLoggingBucket}"
          Action:
          - "s3:ListBucket"
          Effect: "Allow"
          Sid: "AllowListTheS3ConfigBucket"
        - Resource:
          - !Sub "arn:${AWS::Partition}:s3:::${PConfigLoggingBucket}/*"
          # TODO does not look like getObject needs also "arn:${AWS::Partition}:s3:::${PConfigLoggingBucket}"
          Action:
          - "s3:GetObject"
          - "s3:GetObjectVersion"
          Effect: "Allow"
          Sid: "AllowReadTheS3ConfigBucket"

  # TODO this creates a data source on quicksight, but not on Athena, that still has only AwsDataCatalog - understand data source in QS vs. Athena
  QuickSightDataSource:
    Type: AWS::QuickSight::DataSource
    Properties:
      AwsAccountId: !Sub '${AWS::AccountId}'
      Type: ATHENA
      DataSourceId: !Sub '${PQuickSightDataSource}' # An ID for the data source. This ID is unique per AWS Region for each AWS account. 
      Name: "CID Config Dashboard DataSource" #  !Sub '${PQuickSightDataSource}'
      DataSourceParameters:
        AthenaParameters:
          WorkGroup: !Ref AthenaWorkgroup
          RoleArn: 
            Fn::GetAtt:
              - "IAMRoleQuickSightDataSource"
              - "Arn"
      Permissions:
        - Actions:
            - 'quicksight:DescribeDataSource'
            - 'quicksight:DescribeDataSourcePermissions'
            - 'quicksight:PassDataSource'
            - 'quicksight:UpdateDataSource'
            - 'quicksight:DeleteDataSource'
            - 'quicksight:UpdateDataSourcePermissions'
          # TODO the region is the one where QuickSight stores the users, returned by a lambda run by CloudFormation as CustomResource
          Principal: !Sub 'arn:${AWS::Partition}:quicksight:${Setup.IdentityRegion}:${AWS::AccountId}:user/default/${PQuickSightUser}'
          # TODO check ${Setup.IdentityRegion} and why it was used originally - Looks like it was set by a lambda function called within the CloudFormation template or something????
          # using ${AWS::Region} does not work
          #     Resource handler returned message: "Invalid request provided: One or more principals in resource permissions list are not valid QuickSight users 
          #     (Service: QuickSight, Status Code: 400, Request ID: null)" (RequestToken: 97c30ba1-f45f-584c-419b-22075bb4d96e, HandlerErrorCode: InvalidRequest)
          # original string was Principal: !Sub 'arn:${AWS::Partition}:quicksight:${Setup.IdentityRegion}:${AWS::AccountId}:user/default/${PQuickSightUser}'

  # TODO from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-athena-datacatalog.html#cfn-athena-datacatalog-type
  # The GLUE type takes a catalog ID parameter and is required. The catalog_id is the account ID of the AWS account to which the Glue catalog belongs.
  # catalog-id=catalog_id
  # The GLUE data catalog type also applies to the default AwsDataCatalog that already exists in your account, of which you can have only one and cannot modify.
  # TODO Still unsure if I need my own Athena data catalog or if I can use the default AwsDataCatalog, and why CID/CUDOS creted its own
  
  # TODO this creates it on Athena, to be seen how (or if) it connects with everything else
  AthenaDataCatalogDataSource:
    Type: AWS::Athena::DataCatalog
    Properties:
      Type: GLUE
      Description: "CID-CRCD Athena data catalog used by the dashboard"
      Name: !Sub '${PAthenaDataSource}'
      Parameters:
        catalog-id: !Sub '${AWS::AccountId}'

  IAMManagedPolicyLambdaGlue:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "cid-crcd-glue-policy-${AWS::Region}-${AWS::AccountId}"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that gives Glue permissions to CID-CRCD Lambda execution role"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource:
          # TODO isn't the Athena TABLE and not DATABASE to be used? Maybe add these two? Or check permissions once installed.
          # - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${PAthenaDatabase}"
          # - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${PAthenaTable}/*"
          - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${PAthenaDatabase}/*"
          - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${PAthenaDatabase}"
          - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog"
          Action:
          - "glue:UpdatePartition"
          - "glue:GetTables"
          - "glue:GetTable"
          - "glue:GetPartitions"
          - "glue:GetPartition"
          - "glue:DeletePartition"
          - "glue:CreatePartition"
          - "glue:BatchGetPartition"
          - "glue:BatchDeletePartition"
          - "glue:BatchCreatePartition"
          Effect: "Allow"
          Sid: "GluePartitions"

  IAMManagedPolicyLambdaS3AthenaQueryResults:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "cid-crcd-s3-athenaqueryresults-policy-${AWS::Region}-${AWS::AccountId}"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that gives permissions on Athena query results S3 bucket to CID-CRCD Lambda execution role"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource:
          - !Sub "arn:${AWS::Partition}:s3:::${AthenaQueryResultBucket}"
          - !Sub "arn:${AWS::Partition}:s3:::${AthenaQueryResultBucket}/*"
          Action:
          - "s3:PutObject"
          - "s3:ListMultipartUploadParts"
          - "s3:ListBucket"
          - "s3:GetObject"
          - "s3:GetBucketLocation"
          Effect: "Allow"
          Sid: "S3AthenaQueryResults"

  IAMManagedPolicyLambdaS3ConfigSnapshotObject:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "cid-crcd-s3-configsnapshotobject-policy-${AWS::Region}-${AWS::AccountId}"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that allows CID-CRCD Lambda to receive objects from the Config S3 bucket"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource:
          - !Sub "arn:${AWS::Partition}:s3:::${PConfigLoggingBucket}/*"
          - !Sub "arn:${AWS::Partition}:s3:::${PConfigLoggingBucket}"
          Action:
          - "s3:GetObject"
          # TODO check what's really needed
          - "s3:ListBucket"
          - "s3:ListBucketVersions"
          - "s3:GetObjectVersion"
          - "s3:GetLifecycleConfiguration"
          Effect: "Allow"
          Sid: "S3ConfigSnapshotObject"

  IAMManagedPolicyLambdaCloudWatchLogs:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "cid-crcd-cloudwatch-logs-policy-${AWS::Region}-${AWS::AccountId}"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that gives CloudWatch Logs permissions to CID-CRCD Lambda execution role"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        # TODO keep the log group name the same as the lambda function, use a reference
        - Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cid-crcd-config-snapshot-partitioner:*"
          Action:
          - "logs:PutLogEvents"
          - "logs:CreateLogStream"
          - "logs:CreateLogGroup"
          Effect: "Allow"
          Sid: "CloudWatchLogGroup"

  IAMManagedPolicyLambdaAthena:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "cid-crcd-athena-policy-${AWS::Region}-${AWS::AccountId}"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that gives Athena permissions to CID-CRCD Lambda execution role"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource: !Sub "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${PAthenaWorkgroup}"
          Action:
          - "athena:StartQueryExecution"
          - "athena:GetQueryExecution"
          Effect: "Allow"
          Sid: "AthenaAccess"

  LambdaFunctionPartitionerConfig:
    Type: AWS::Lambda::Function
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      FunctionName: "cid-crcd-config-snapshot-partitioner"
      Description: "CID-CRCD Dashboard - Lambda function that adds partitions when there are new AWS Config Snapshots events"
      MemorySize: 128
      EphemeralStorage:
        Size: 512
      Timeout: 300
      Runtime: "python3.12"
      Architectures:
        - "x86_64"
      TracingConfig:
        Mode: "Active"
      VpcConfig:
        SecurityGroupIds: []
        SubnetIds: []
        Ipv6AllowedForDualStack: false
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      # TODO the file name from the code below will be called index.py once you open it in Lambda, this may change depending on how the final code is retrieved
      Handler: "index.lambda_handler"
      ReservedConcurrentExecutions: 1
      Role:
        Fn::GetAtt:
        - "IAMRoleLambdaPartitionerConfig"
        - "Arn"
      FileSystemConfigs: []
      LoggingConfig:
        LogFormat: "Text"
        # this is already by default LogGroup: "/aws/lambda/cid-crcd-config-snapshot-partitioner"
      Environment:
        Variables:
          ATHENA_DATABASE_NAME: !Ref PAthenaDatabase
          ATHENA_QUERY_RESULTS_BUCKET_NAME: !Ref AthenaQueryResultBucket # TODO DOES IT PASS THE RESOURCE? AthenaQueryResultBucketName
          ATHENA_WORKGROUP: !Ref PAthenaWorkgroup
          CONFIG_TABLE_NAME: !Ref PAthenaTable
          # TODO: Refactor the lambda code and remove this variable. It's the region where the function is deployed anyway
          ATHENA_REGION: !Ref AWS::Region
      Code:
        # TODO: handle the code
        ZipFile: | 
          import datetime
          import re
          import boto3
          import os

          TABLE_NAME = ""  # TODO: this can only be the env variable "CONFIG_TABLE_NAME"
          ATHENA_DATABASE_NAME = os.environ["ATHENA_DATABASE_NAME"]
          ATHENA_QUERY_RESULTS_BUCKET_NAME = os.environ["ATHENA_QUERY_RESULTS_BUCKET_NAME"]
          ATHENA_REGION = os.environ['ATHENA_REGION']
          ACCOUNT_ID = None  # Determined at runtime, it is the same AWS Account of the lambda function
          ATHENA_WORKGROUP = os.environ['ATHENA_WORKGROUP']
          LOGGING_ON = True  # enables additional logging to CloudWatch

          # This regular expresions is compatible with how ControlTower stores Config logs in S3
          # Structure for Config Snapshots: ORG-ID/AWSLogs/ACCOUNT-NUMBER/Config/REGION/YYYY/MM/DD/ConfigSnapshot/objectname.json.gz
          # Object name follows this pattern: ACCOUNT-NUMBER_Config_REGION_ConfigSnapshot_TIMESTAMP-YYYYMMDDHHMMSS_RANDOM-TEXT.json.gz
          # For example: 123412341234_Config_eu-north-1_ConfigSnapshot_20240306T122755Z_09c5h4kc-3jc7-4897-830v-d7a858325638.json.gz
          REGEX_CONFIG_SNAPSHOT_ORGANIZATION = '^([\w-]+)/AWSLogs/(\d+)/Config/([\w-]+)/(\d+)/(\d+)/(\d+)/ConfigSnapshot/[^\\\]+$'

          # This regular expresions is compatible with how Config Logs are stored in S3 for a standalone account
          # Structure for Config Snapshots: AWSLogs/ACCOUNT-NUMBER/Config/REGION/YYYY/MM/DD/ConfigSnapshot/objectname.json.gz
          # Object name follows the same pattern for Config above
          REGEX_CONFIG_SNAPSHOT_STANDALONE = '^AWSLogs/(\d+)/Config/([\w-]+)/(\d+)/(\d+)/(\d+)/ConfigSnapshot/[^\\\]+$'

          OBJECT_KEY_MATCH_STATUS_FAIL = 0
          OBJECT_KEY_MATCH_STATUS_CONFIG_SNAPSHOT_ORGANIZATION = 1
          OBJECT_KEY_MATCH_STATUS_CONFIG_SNAPSHOT_STANDALONE = 2

          athena = boto3.client('athena')

          class AthenaException(Exception):
              pass

          def lambda_handler(event, context):
              global ACCOUNT_ID

              object_key = event['Records'][0]['s3']['object']['key']

              # the object key contains the full name of the S3 object, including the prefixes
              outcome, match = get_object_key_match(object_key)
              if outcome == OBJECT_KEY_MATCH_STATUS_FAIL:
                  return

              ACCOUNT_ID = context.invoked_function_arn.split(':')[4]

              object_key_parent = 's3://{bucket_name}/{object_key_parent}/'.format(
                  bucket_name=event['Records'][0]['s3']['bucket']['name'],
                  object_key_parent=os.path.dirname(object_key))
              
              if LOGGING_ON: print('This is match.groups', match.groups())

              # Extracting account, region and date of the new object from the object key
              # these are positional on the S3 path - the first element has index 1
              # Config has different positioning depending on the account structure
              #
              # Config in Organizations  match.groups ('ORG-ID', 'ACCOUNT-NUMBER', 'REGION', 'YYYY', 'MM', 'DD')
              # Config in Standalone     match.groups ('ACCOUNT-NUMBER', 'REGION', 'YYYY', 'MM', 'DD')
              accountid = get_accountid(outcome, match)
              region = get_region(outcome, match)
              date = get_date(outcome, match).strftime('%Y-%m-%d')
              
              drop_partition(accountid, region, date)
              add_partition(accountid, region, date, object_key_parent)
    
          def get_object_key_match(object_key):
              global ACCOUNT_ID
              global TABLE_NAME

              # Checks whether this is a Config Snapshot on a multi-account organization
              if (re.match(REGEX_CONFIG_SNAPSHOT_ORGANIZATION, object_key)):
                  TABLE_NAME = os.environ["CONFIG_TABLE_NAME"]
                  print('Adding partitions for Configuration Snapshot (format: AWS Organizations) object key', object_key)
                  return OBJECT_KEY_MATCH_STATUS_CONFIG_SNAPSHOT_ORGANIZATION, re.match(REGEX_CONFIG_SNAPSHOT_ORGANIZATION, object_key)
              

              # Checks whether this is a Config Snapshot on a standalone account
              if (re.match(REGEX_CONFIG_SNAPSHOT_STANDALONE, object_key)):
                  TABLE_NAME = os.environ["CONFIG_TABLE_NAME"]
                  print('Adding partitions for Configuration Snapshot (format: standalone Account) object key', object_key)
                  return OBJECT_KEY_MATCH_STATUS_CONFIG_SNAPSHOT_STANDALONE, re.match(REGEX_CONFIG_SNAPSHOT_STANDALONE, object_key)

              # The object is neither, returning OBJECT_KEY_MATCH_STATUS_FAIL will end the function
              print('Ignoring event for non-Configuration Snapshot object key', object_key)
              return OBJECT_KEY_MATCH_STATUS_FAIL, None

          def get_accountid(outcome, match):
              # Config in Organizations  match.groups ('ORG-ID', 'ACCOUNT-NUMBER', 'REGION', 'YYYY', 'MM', 'DD')
              # Config in Standalone     match.groups ('ACCOUNT-NUMBER', 'REGION', 'YYYY', 'MM', 'DD')

              result = None 
              if outcome == OBJECT_KEY_MATCH_STATUS_CONFIG_SNAPSHOT_ORGANIZATION:
                  result = match.group(2)

              if outcome == OBJECT_KEY_MATCH_STATUS_CONFIG_SNAPSHOT_STANDALONE:
                  result = match.group(1)

              if LOGGING_ON: print ('account id:', result)
              return result

          def get_region(outcome, match):
              # Config in Organizations  match.groups ('ORG-ID', 'ACCOUNT-NUMBER', 'REGION', 'YYYY', 'MM', 'DD')
              # Config in Standalone     match.groups ('ACCOUNT-NUMBER', 'REGION', 'YYYY', 'MM', 'DD')

              result = None  
              if outcome == OBJECT_KEY_MATCH_STATUS_CONFIG_SNAPSHOT_ORGANIZATION:
                  result = match.group(3)

              if outcome == OBJECT_KEY_MATCH_STATUS_CONFIG_SNAPSHOT_STANDALONE:
                  result = match.group(2)

              if LOGGING_ON: print ('region:', result)
              return result

          def get_date(outcome, match):
              # Config in Organizations  match.groups ('ORG-ID', 'ACCOUNT-NUMBER', 'REGION', 'YYYY', 'MM', 'DD')
              # Config in Standalone     match.groups ('ACCOUNT-NUMBER', 'REGION', 'YYYY', 'MM', 'DD')

              result = None
              if outcome == OBJECT_KEY_MATCH_STATUS_CONFIG_SNAPSHOT_ORGANIZATION:
                  result = datetime.date(int(match.group(4)), int(match.group(5)), int(match.group(6)))

              if outcome == OBJECT_KEY_MATCH_STATUS_CONFIG_SNAPSHOT_STANDALONE:
                  result = datetime.date(int(match.group(3)), int(match.group(4)), int(match.group(5)))

              return result
    
          def add_partition(accountid_partition_value, region_partition_value, dt_partition_value, partition_location):
              execute_query('ALTER TABLE {table_name} ADD PARTITION {partition} location \'{partition_location}\''.format(
                  table_name=TABLE_NAME,
                  partition=build_partition_string(accountid_partition_value, region_partition_value, dt_partition_value),
                  partition_location=partition_location))
                  
          def drop_partition(accountid_partition_value, region_partition_value, dt_partition_value):
              execute_query('ALTER TABLE {table_name} DROP IF EXISTS PARTITION {partition}'.format(
                  table_name=TABLE_NAME,
                  partition=build_partition_string(accountid_partition_value, region_partition_value, dt_partition_value)))
                  
          def build_partition_string(accountid_partition_value, region_partition_value, dt_partition_value):
              return "(accountid='{accountid_partition_value}', dt='{dt_partition_value}', region='{region_partition_value}')".format(
                accountid_partition_value=accountid_partition_value,
                  dt_partition_value=dt_partition_value,
                  region_partition_value=region_partition_value)

          def execute_query(query):
              print('Executing query:', query)
              query_output_location = 's3://{athena_query_results_bucket}'.format(
                  athena_query_results_bucket=ATHENA_QUERY_RESULTS_BUCKET_NAME,
                  account_id=ACCOUNT_ID,
                  region=ATHENA_REGION)
              start_query_response = athena.start_query_execution(
                  QueryString=query,
                  QueryExecutionContext={
                      'Database': ATHENA_DATABASE_NAME
                  },
                  ResultConfiguration={
                      'OutputLocation': query_output_location,
                  },
                  WorkGroup=ATHENA_WORKGROUP
              )
              print('Query started')
              
              is_query_running = True
              while is_query_running:
                  get_query_execution_response = athena.get_query_execution(
                      QueryExecutionId=start_query_response['QueryExecutionId']
                  )
                  query_state = get_query_execution_response['QueryExecution']['Status']['State']
                  is_query_running = query_state in ('RUNNING', 'QUEUED')
                  
                  if not is_query_running and query_state != 'SUCCEEDED':
                      raise AthenaException('Query failed')
              print('Query completed')

  IAMRoleLambdaPartitionerConfig:
    Type: AWS::IAM::Role
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Description: "CID-CRCD Dashboard - Allows to add partitions to Athena and Glue, send logs to Cloudwatch, access Athena query results S3 bucket, receive objects from Config bucket. Each defined in separate policies"
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - Ref: "IAMManagedPolicyLambdaAthena"
      - Ref: "IAMManagedPolicyLambdaGlue"
      - Ref: "IAMManagedPolicyLambdaS3AthenaQueryResults"
      - Ref: "IAMManagedPolicyLambdaCloudWatchLogs"
      - Ref: "IAMManagedPolicyLambdaS3ConfigSnapshotObject"
      MaxSessionDuration: 3600
      RoleName: !Sub "cid-crcd-lambda-partitioner-role-${AWS::Region}-${AWS::AccountId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
          Sid: "AllowLambdaAssumeRole"

  # Allows the S3 bucket that contains the Config Snapshots to invoke the lambda function
  LambdaInvocationPermissionLambdaPartitionerConfig:
    Type: AWS::Lambda::Permission
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "LambdaFunctionPartitionerConfig"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: !Sub "arn:${AWS::Partition}:s3:::${PConfigLoggingBucket}"
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref PConfigLoggingAccountID

  # ****************************************************************************************************************************************
  # Runs a lambda to identify the region where QuickSight stores its users
  Setup:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt CustomResourceFunctionInit.Arn

  InitLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub "cid-crcd-supportingLambdaExecution-role-${AWS::Region}-${AWS::AccountId}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: quicksight:DescribeUser
                Resource: !Sub 'arn:${AWS::Partition}:quicksight:*:${AWS::AccountId}:user/default/${PQuickSightUser}' # region=* as at this moment we do not know the Identity region where QS stores users
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AWSLambdaExecute

  # this layer has the code to extract the Identity region for the QuickSight user
  CidResourceLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: 'CidCrcdLambdaLayer'
      Description: An AWS managed layer with a cid-cmd package installed
      Content:
        S3Bucket: !Sub '${LambdaLayerBucketPrefix}-${AWS::Region}'
        S3Key: 'cid-resource-lambda-layer/cid-0.2.46.zip' # replace version here if needed
      CompatibleRuntimes:
        - python3.10

  CustomResourceFunctionInit:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "CidCrCdCustomResourceFunctionInit"
      Role: !GetAtt 'InitLambdaExecutionRole.Arn'
      Description: "Supports CID-CRCD Dashboad deployment by finding the Identity region where QuickSight stores its users"
      Runtime: python3.12
      Architectures: [ x86_64 ] # Compatible with arm64 but it is not supported in all regions
      MemorySize: 128
      Timeout: 300
      Handler: 'index.lambda_handler'
      Code:
        ZipFile: |
          import os
          import uuid
          import json
          import boto3
          import botocore
          import urllib3

          from cid.helpers import QuickSight # from layer
          from cid.utils import set_parameters

          QUICKSIGHT_USER = os.environ['QUICKSIGHT_USER']

          def lambda_handler(event, context):
              print(event)

              region = boto3.session.Session().region_name
              res = (True, f"In case of error check logs")
              identity_region = ''
              try:
                  set_parameters({'quicksight-user': QUICKSIGHT_USER})
                  identity_region = get_identity_region()
                  print("QuickSight identity region: " + identity_region)
                  
                  
              finally:
                  log_url = f"https://{region}.console.aws.amazon.com/cloudwatch/home?region={region}#logEvent:group={context.log_group_name};stream={context.log_stream_name}"
                  url = event.get('ResponseURL')
                  body = {}
                  body['Status'] = 'SUCCESS' if res[0] else 'FAILED'
                  body['Reason'] = res[1] + '\nLogs: ' + log_url
                  body['PhysicalResourceId'] = 'keep_it_constant'
                  body['StackId'] = event.get('StackId')
                  body['RequestId'] = event.get('RequestId')
                  body['LogicalResourceId'] = event.get('LogicalResourceId')
                  body['NoEcho'] = False
                  body['Data'] =  {'Reason': res[1], 'uuid': str(uuid.uuid1()), 'IdentityRegion': identity_region}
                  print(body)
                  if not url: return
                  json_body=json.dumps(body)
                  try:
                      http = urllib3.PoolManager()
                      response = http.request('PUT', url, body=json_body, headers={'content-type' : '', 'content-length' : str(len(json_body))}, retries=False)
                      print(f"Status code: {response}")
                  except Exception as exc:
                      print("Failed sending PUT to CFN: " + str(exc))

          def get_identity_region():
              qs = QuickSight(boto3.session.Session())
              return qs.identityRegion

      Layers:
        - !Ref CidResourceLambdaLayer
      Environment:
        Variables:
          QUICKSIGHT_USER: !Ref PQuickSightUser


Outputs:
  QuickSightDataRoleARN:
    Description: "ARN of the Role created for QuickSight"
    Value:
      Fn::GetAtt:
        - "IAMRoleQuickSightDataSource"
        - "Arn"

  # TODO SEE IF IT IS NEEDED LATER
  AthenaDataCatalog:
    Description: "ARN of the Athena data catalog"
    Value: !GetAtt AthenaDataCatalogDataSource.Arn # !Sub "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:datacatalog/${PAthenaDataSource}"

  QuickSightDataSourceArn:
    Description: "ARN of the QuickSight Data Source"
    Value:
      Fn::GetAtt:
        - "QuickSightDataSource"
        - "Arn"
  
  LambdaARN:
    Description: "ARN of the Lambda Partitioner function supporting CID-CRCD Dashboard"
    Value:
      Fn::GetAtt:
        - "LambdaFunctionPartitionerConfig"
        - "Arn"

  LambdaRoleARN:
    Description: "ARN of the execution role of the Lambda Partitioner function"
    Value:
      Fn::GetAtt:
        - "IAMRoleLambdaPartitionerConfig"
        - "Arn"
  
  # TODO temp to see this on the output
  QuickSightIdentityRegion:
    Description: "Identity region where QuickSight stores its users"
    Value: !GetAtt Setup.IdentityRegion