AWSTemplateFormatVersion: '2010-09-09'
Description: "Lambda function supporting AWS Config Resource Compliance Dashboard (CRCD) v2"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Athena Configuration"
        Parameters:
          - AthenaWorkgroup
          - AthenaDatabaseName
          - AthenaQueryResultBucketName
          - AthenaConfigSnapshotsTableName
      -
        Label:
          default: "AWS Config Logging"
        Parameters:
          - ConfigLoggingBucketArn
          - ConfigLoggingAccountID

    ParameterLabels:
      AthenaWorkgroup:
        default: "Athena Workgroup"
      AthenaDatabaseName:
        default: "Athena Database"
      AthenaQueryResultBucketName:
        default: "Athena query results bucket"
      AthenaConfigSnapshotsTableName:
        default: "Athena table for AWS Config data"
      ConfigLoggingBucketArn:
        default: "Config bucket ARN"
      ConfigLoggingAccountID:
        default: "Config bucket account"

# TODO match parameters with the default values by cid-cmd tool
Parameters:
  ConfigLoggingBucketArn:
    Type: "String"
    Default: "arn:aws:s3:::your-config-bucket"
    Description: "ARN of the S3 bucket that collects AWS Config data"
    AllowedPattern: '/^arn:(aws|aws-cn|aws-us-gov):s3:::[a-z0-9][a-z0-9-]{1,61}[a-z0-9]$/gm'

  ConfigLoggingAccountID:
    Type: "String"
    Default: "123412341234"
    Description: "AWS Account ID that contains the bucket holding AWS Config snapshots"
    MaxLength: 12
    MinLength: 12
    AllowedPattern: '^\d{12}$'

  AthenaDatabaseName:
    Type: "String"
    Default: "cid-crcd-athena-database"
    Description: "The Athena database for the CID-CRCD dashboard"
    MinLength: 1

  AthenaQueryResultBucketName:
    Type: "String"
    Default: "cid-crcd-athenaresults" 
    Description: "The Athena query result bucket for the workgroup"
    MinLength: 1

  AthenaWorkgroup:
    Type: "String"
    Default: "cid-crcd-athena-workgroup"
    Description: "The Athena workgroup for the CID-CRCD dashboard"
    MinLength: 1

  AthenaConfigSnapshotsTableName:
    Type: "String"
    Default: "aws_config_configuration_snapshots"
    Description: "The Athena table that contains the AWS Config data for the dashboard"
    MinLength: 1

# TODO why these are validated when I run the stack? and not when I speify the parameters?
Rules:
  MandatoryConfigLoggingBucketArn:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref ConfigLoggingBucketArn
          - ''
        AssertDescription: "Config bucket ARN is required"
  MandatoryConfigLoggingAccountID:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref ConfigLoggingAccountID
          - ''
        AssertDescription: "Config bucket account is required"
  MandatoryAthenaDatabaseName:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref AthenaDatabaseName
          - ''
        AssertDescription: "Athena database is required"
  MandatoryAthenaQueryResultBucketName:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref AthenaQueryResultBucketName
          - ''
        AssertDescription: "Athena query result bucket is required"
  MandatoryAthenaWorkgroup:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref AthenaWorkgroup
          - ''
        AssertDescription: "Athena workgroup is required"
  MandatoryAthenaConfigSnapshotsTableName:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref AthenaConfigSnapshotsTableName
          - ''
        AssertDescription: "Athena table is required"

Resources:
  IAMManagedPolicyLambdaCIDCRCDGlue:
    Type: "AWS::IAM::ManagedPolicy"
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      ManagedPolicyName: "cid-crcd-glue-policy"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that gives Glue permissions to CID-CRCD Lambda execution role"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource:
          - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${AthenaDatabaseName}/*"
          - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${AthenaDatabaseName}"
          - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog"
          Action:
          - "glue:UpdatePartition"
          - "glue:GetTables"
          - "glue:GetTable"
          - "glue:GetPartitions"
          - "glue:GetPartition"
          - "glue:DeletePartition"
          - "glue:CreatePartition"
          - "glue:BatchGetPartition"
          - "glue:BatchDeletePartition"
          - "glue:BatchCreatePartition"
          Effect: "Allow"
          Sid: "GluePartitions"

  IAMManagedPolicyLambdaCIDCRCDS3:
    Type: "AWS::IAM::ManagedPolicy"
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      ManagedPolicyName: "cid-crcd-s3-policy"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that gives permissions on Athena query results S3 bucket to CID-CRCD Lambda execution role"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource:
          - !Sub "arn:${AWS::Partition}:s3:::${AthenaQueryResultBucketName}"
          - !Sub "arn:${AWS::Partition}:s3:::${AthenaQueryResultBucketName}/*"
          Action:
          - "s3:PutObject"
          - "s3:ListMultipartUploadParts"
          - "s3:ListBucket"
          - "s3:GetObject"
          - "s3:GetBucketLocation"
          Effect: "Allow"
          Sid: "S3AthenaQueryResults"

  IAMManagedPolicyLambdaCIDCRCDCloudWatchLogs:
    Type: "AWS::IAM::ManagedPolicy"
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      ManagedPolicyName: "cid-crcd-cloudwatch-logs-policy"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that gives CloudWatch Logs permissions to CID-CRCD Lambda execution role"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cid-crcd-lambda-partitioner:*"
          Action:
          - "logs:PutLogEvents"
          - "logs:CreateLogStream"
          - "logs:CreateLogGroup"
          Effect: "Allow"
          Sid: "CloudWatchLogGroup"

  IAMManagedPolicyLambdaCIDCRCDAthena:
    Type: "AWS::IAM::ManagedPolicy"
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      ManagedPolicyName: "cid-crcd-athena-policy"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that gives Athena permissions to CID-CRCD Lambda execution role"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource: !Sub "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${AthenaWorkgroup}"
          Action:
          - "athena:StartQueryExecution"
          - "athena:GetQueryExecution"
          Effect: "Allow"
          Sid: "AthenaAccess"

  LambdaFunctionCIDCRCDConfig:
    Type: "AWS::Lambda::Function"
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      FunctionName: "cid-crcd-config-snapshot-partitioner"
      Description: "CID-CRCD Dashboard - Lambda function that adds partitions when there are new AWS Config Snapshots events"
      MemorySize: 128
      EphemeralStorage:
        Size: 512
      Timeout: 300
      Runtime: "python3.12"
      Architectures:
        - "x86_64"
      TracingConfig:
        Mode: "Active"
      VpcConfig:
        SecurityGroupIds: []
        SubnetIds: []
        Ipv6AllowedForDualStack: false
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "lambda_function.lambda_handler"
      ReservedConcurrentExecutions: 1
      Role:
        Fn::GetAtt:
        - "IAMRoleLambdaCIDCRCDConfig"
        - "Arn"
      FileSystemConfigs: []
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: "/aws/lambda/cid-crcd-lambda-partitioner"
      Environment:
        Variables:
          ATHENA_DATABASE_NAME: !Ref AthenaDatabaseName
          ATHENA_QUERY_RESULTS_BUCKET_NAME: !Ref AthenaQueryResultBucketName
          ATHENA_WORKGROUP: !Ref AthenaWorkgroup
          CONFIG_TABLE_NAME: !Ref AthenaConfigSnapshotsTableName
          # TODO: Refactor the lambda code and remove this variable. It's the region where the function is deployed anyway
          ATHENA_REGION: !Ref AWS::Region
      Code:
        # TODO: handle the code
        ZipFile: | 
          def lambda_handler(event, context):
            print("Hello Lambda!")
            return "Lambda is done"
        
  IAMRoleLambdaCIDCRCDConfig:
    Type: "AWS::IAM::Role"
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Description: "CID-CRCD Dashboard - Allows to add partitions to Athena and Glue, send logs to Cloudwatch, access Athena query results S3 bucket. Each defined in separate policies"
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - Ref: "IAMManagedPolicyLambdaCIDCRCDAthena"
      - Ref: "IAMManagedPolicyLambdaCIDCRCDGlue"
      - Ref: "IAMManagedPolicyLambdaCIDCRCDS3"
      - Ref: "IAMManagedPolicyLambdaCIDCRCDCloudWatchLogs"
      MaxSessionDuration: 3600
      RoleName: "cid-crcd-lambda-execution-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
          Sid: ""

  # Allows the S3 bucket that contains the Config Snapshots to invoke the lambda function
  # The S3 bucket must be manually configured, too
  LambdaPermissionLambdaCIDCRCDInvocationPermission:
    Type: "AWS::Lambda::Permission"
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "LambdaFunctionCIDCRCDConfig"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: !Ref ConfigLoggingBucketArn
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref ConfigLoggingAccountID

Outputs:
  LambdaARN:
    Description: "ARN of the Lambda function supporting CID-CRCD Dashboard"
    Value:
      Fn::GetAtt:
        - "LambdaFunctionCIDCRCDConfig"
        - "Arn"