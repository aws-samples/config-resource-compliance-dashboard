AWSTemplateFormatVersion: '2010-09-09'
Description: "Deployment of AWS Config Resource Compliance Dashboard (CRCD) v2"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "QuickSight"
        Parameters:
            - PQuickSightUser
      -
        Label:
          default: "AWS Config Logging"
        Parameters:
          - PConfigLoggingBucket
          - PConfigLoggingAccountID 
      -
        Label:
          default: "Athena Configuration (DO NOT CHANGE)"
        Parameters:
          - PAthenaWorkgroup
          - PAthenaDatabase
          - PAthenaTable
          - PAthenaQueryResultBucketPrefix
      
    ParameterLabels:
      PAthenaWorkgroup:
        default: "Athena workgroup"
      PAthenaDatabase:
        default: "Athena database"
      PAthenaQueryResultBucketPrefix:
        default: "Prefix of the Athena query results bucket"
      PAthenaTable:
        default: "Athena table for AWS Config data"
      PConfigLoggingBucket:
        default: "AWS Config bucket"
      PConfigLoggingAccountID:
        default: "Config bucket account"
      PQuickSightUser:
        default: "User name of QuickSight user (as displayed in QuickSight admin panel)"
      
Parameters:
  PQuickSightUser:
    Type: String
    MinLength: 1
    Default: "Replace with QuickSight user"
    Description: See https://quicksight.aws.amazon.com/sn/admin#users

  PConfigLoggingBucket:
    Type: "String"
    Default: "your-config-bucket"
    Description: "Name of the Amazon S3 bucket that collects AWS Config data (Required)"
    AllowedPattern: '^[a-z0-9][a-z0-9-]{1,61}[a-z0-9]$'
    ConstraintDescription: "Required"
  
  PConfigLoggingAccountID:
    Type: "String"
    Default: "123412341234"
    Description: "AWS Account ID that contains the bucket holding AWS Config snapshots (Required)"
    MaxLength: 12
    MinLength: 12
    AllowedPattern: '^\d{12}$'
    ConstraintDescription: "Required"

  PAthenaDatabase:
    Type: "String"
    # The name cannot have the symbol '-' and must have lowercase character. '_' seems accepted
    Default: "cid_crcd_database"
    Description: "The Athena/Glue database for the CID-CRCD dashboard (Required)"
    MinLength: 1
    ConstraintDescription: "Required"

  PAthenaQueryResultBucketPrefix:
    Type: "String"
    Default: "cid-crcd-athena-query-results" 
    Description: "The Athena query result bucket for the workgroup, Account ID and Region will be added to the name by this tempalte (Required)"
    # 64 characters in the bucket name, but automatically the template will add 2 dashes, 12 digit account number and region up to 14 characters ap-southeast-4, ap-northeast-1
    # that leaves 36 character for the prefix
    AllowedPattern: '^[a-z0-9][a-z0-9-]{1,33}[a-z0-9]$'
    ConstraintDescription: "Required"

  PAthenaWorkgroup:
    Type: "String"
    Default: "cid-crcd-dashboard"
    Description: "The Athena workgroup for the CID-CRCD dashboard (Required)"
    MinLength: 1
    ConstraintDescription: "Required"

  PAthenaTable:
    Type: "String"
    Default: "cid_crcd_config"
    Description: "The Athena table that contains the AWS Config data for the dashboard (Required)"
    MinLength: 1
    ConstraintDescription: "Required"


Rules:
  MandatoryQuickSightUser:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PQuickSightUser
          - ''
        AssertDescription: "QuickSight user is required"
  MandatoryConfigLoggingBucket:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PConfigLoggingBucket
          - ''
        AssertDescription: "Config bucket name is required"
  MandatoryConfigLoggingAccountID:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PConfigLoggingAccountID
          - ''
        AssertDescription: "Config bucket account is required"
  MandatoryAthenaDatabase:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PAthenaDatabase
          - ''
        AssertDescription: "Athena database is required"
  MandatoryAthenaQueryResultBucketPrefix:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PAthenaQueryResultBucketPrefix
          - ''
        AssertDescription: "Athena query result bucket is required"
  MandatoryAthenaWorkgroup:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PAthenaWorkgroup
          - ''
        AssertDescription: "Athena workgroup is required"
  MandatoryAthenaTable:
    Assertions:
      - Assert: !Not 
        - !Equals 
          - !Ref PAthenaTable
          - ''
        AssertDescription: "Athena table name is required"

Resources:
  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      DatabaseInput:
        Description: "Database for AWS Config Resource Compliance Dashboard (CID-CRCD)"
        Name: !Sub "${PAthenaDatabase}"
      # The AWS account ID for the account in which to create the catalog object.
      CatalogId: !Sub '${AWS::AccountId}'

  AthenaQueryResultBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${PAthenaQueryResultBucketPrefix}-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: BucketOwnerFullControl
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContent
            Status: 'Enabled'
            ExpirationInDays: 7
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W3045 # Consider using AWS::S3::BucketPolicy instead of AccessControl; standard Athena results setup

  # Athena workgroup to execute CRCD queries with its own result bucket
  # Using RecursiveDeleteOption - The option to delete a workgroup and its contents even if the workgroup contains any named queries. The default is false.
  AthenaWorkgroup: 
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: !Sub '${PAthenaWorkgroup}'
      Description: 'Used by AWS Config Resource Compliance Dashboard (CRCD)'
      RecursiveDeleteOption: True 
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: true
        ResultConfiguration:
          EncryptionConfiguration:
            EncryptionOption: SSE_S3
          OutputLocation: !Sub 's3://${AthenaQueryResultBucket}/'

  IAMRoleQuickSightDataSource:
    Type: AWS::IAM::Role
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Description: "CID-CRCD Dashboard - Allows QuickSight datasource access to Athena/Glue and the underlying S3 bucket that contains AWS Config snapshots"
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - Ref: "IAMManagedPolicyQuickSightDataSource"
      MaxSessionDuration: 3600
      RoleName: !Sub "cid-crcd-quicksight-datasource-role-${AWS::Region}-${AWS::AccountId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "quicksight.amazonaws.com"

  IAMManagedPolicyQuickSightDataSource:
    Type: AWS::IAM::ManagedPolicy
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "cid-crcd-quicksight-datasource-policy-${AWS::Region}-${AWS::AccountId}" 
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that allows QuickSight to access Glue, Athena and the Config S3 bucket"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource: "*"
          Action:
          - "lakeformation:GetDataAccess"
          - "athena:ListDataCatalogs"
          - "athena:ListDatabases"
          - "athena:ListTableMetadata"
          Effect: "Allow"
          Sid: "ReadAthenaLakeFormation"
        - Resource: "*"
          Action:
          - "glue:GetPartition"
          - "glue:GetPartitions"
          - "glue:GetDatabases"
          - "glue:GetTable"
          - "glue:GetTables"
          Effect: "Allow"
          Sid: "AccessGlueData"
        - Resource: "*"
          Action:
          - "athena:ListDatabases"
          - "athena:ListDataCatalogs"
          - "athena:ListDatabases"
          - "athena:GetQueryExecution"
          - "athena:GetQueryResults"
          - "athena:StartQueryExecution"
          - "athena:GetQueryResultsStream"
          - "athena:GetTableMetadata"
          Effect: "Allow"
          Sid: "AccessAthenaDatabaseWorkgroup"
        - Resource:
          - !Sub "arn:${AWS::Partition}:s3:::${AthenaQueryResultBucket}"
          - !Sub "arn:${AWS::Partition}:s3:::${AthenaQueryResultBucket}/*"
          Action:
          - "s3:GetBucketLocation"
          - "s3:ListBucket"
          - "s3:GetObject"
          - "s3:PutObject"
          - "s3:ListBucketMultipartUploads"
          - "s3:ListMultipartUploadParts"
          - "s3:AbortMultipartUpload"
          Effect: "Allow"
          Sid: "AllowReadAndWriteToAthenaQueryResultBucket"
        - Resource:
          - !Sub "arn:${AWS::Partition}:s3:::${PConfigLoggingBucket}"
          Action:
          - "s3:ListBucket"
          Effect: "Allow"
          Sid: "AllowListTheS3ConfigBucket"
        - Resource:
          - !Sub "arn:${AWS::Partition}:s3:::${PConfigLoggingBucket}/*"
          Action:
          - "s3:GetObject"
          - "s3:GetObjectVersion"
          Effect: "Allow"
          Sid: "AllowReadTheS3ConfigBucket"

  IAMManagedPolicyLambdaGlue:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "cid-crcd-glue-policy-${AWS::Region}-${AWS::AccountId}"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that gives Glue permissions to CID-CRCD Lambda execution role"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource:
          - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${PAthenaDatabase}/*"
          - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${PAthenaDatabase}"
          - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog"
          Action:
          - "glue:UpdatePartition"
          - "glue:GetTables"
          - "glue:GetTable"
          - "glue:GetPartitions"
          - "glue:GetPartition"
          - "glue:DeletePartition"
          - "glue:CreatePartition"
          - "glue:BatchGetPartition"
          - "glue:BatchDeletePartition"
          - "glue:BatchCreatePartition"
          Effect: "Allow"
          Sid: "GluePartitions"

  IAMManagedPolicyLambdaS3AthenaQueryResults:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "cid-crcd-s3-athenaqueryresults-policy-${AWS::Region}-${AWS::AccountId}"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that gives permissions on Athena query results S3 bucket to CID-CRCD Lambda execution role"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource:
          - !Sub "arn:${AWS::Partition}:s3:::${AthenaQueryResultBucket}"
          - !Sub "arn:${AWS::Partition}:s3:::${AthenaQueryResultBucket}/*"
          Action:
          - "s3:PutObject"
          - "s3:ListMultipartUploadParts"
          - "s3:ListBucket"
          - "s3:GetObject"
          - "s3:GetBucketLocation"
          Effect: "Allow"
          Sid: "S3AthenaQueryResults"

  IAMManagedPolicyLambdaS3ConfigSnapshotObject:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "cid-crcd-s3-configsnapshotobject-policy-${AWS::Region}-${AWS::AccountId}"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that allows CID-CRCD Lambda to receive objects from the Config S3 bucket"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource:
          - !Sub "arn:${AWS::Partition}:s3:::${PConfigLoggingBucket}/*"
          - !Sub "arn:${AWS::Partition}:s3:::${PConfigLoggingBucket}"
          Action:
          - "s3:GetObject"
          - "s3:ListBucket"
          - "s3:ListBucketVersions"
          - "s3:GetObjectVersion"
          - "s3:GetLifecycleConfiguration"
          Effect: "Allow"
          Sid: "S3ConfigSnapshotObject"

  IAMManagedPolicyLambdaCloudWatchLogs:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "cid-crcd-cloudwatch-logs-policy-${AWS::Region}-${AWS::AccountId}"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that gives CloudWatch Logs permissions to CID-CRCD Lambda execution role"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        # keep the log group name the same as the lambda function
        - Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cid-crcd-config-snapshot-partitioner:*"
          Action:
          - "logs:PutLogEvents"
          - "logs:CreateLogStream"
          - "logs:CreateLogGroup"
          Effect: "Allow"
          Sid: "CloudWatchLogGroup"

  IAMManagedPolicyLambdaAthena:
    Type: AWS::IAM::ManagedPolicy
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "cid-crcd-athena-policy-${AWS::Region}-${AWS::AccountId}"
      Path: "/"
      Description: "CID-CRCD Dashboard - Policy that gives Athena permissions to CID-CRCD Lambda execution role"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource: !Sub "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${PAthenaWorkgroup}"
          Action:
          - "athena:StartQueryExecution"
          - "athena:GetQueryExecution"
          Effect: "Allow"
          Sid: "AthenaAccess"

  LambdaFunctionPartitionerConfig:
    Type: AWS::Lambda::Function
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      FunctionName: "cid-crcd-config-snapshot-partitioner"
      Description: "CID-CRCD Dashboard - Lambda function that adds partitions when there are new AWS Config Snapshots events"
      MemorySize: 128
      EphemeralStorage:
        Size: 512
      Timeout: 300
      Runtime: "python3.12"
      Architectures:
        - "x86_64"
      TracingConfig:
        Mode: "Active"
      VpcConfig:
        SecurityGroupIds: []
        SubnetIds: []
        Ipv6AllowedForDualStack: false
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "index.lambda_handler"
      ReservedConcurrentExecutions: 1
      Role:
        Fn::GetAtt:
        - "IAMRoleLambdaPartitionerConfig"
        - "Arn"
      FileSystemConfigs: []
      LoggingConfig:
        LogFormat: "Text"
        # this is already by default LogGroup: "/aws/lambda/cid-crcd-config-snapshot-partitioner"
      Environment:
        Variables:
          ATHENA_DATABASE_NAME: !Ref PAthenaDatabase
          ATHENA_QUERY_RESULTS_BUCKET_NAME: !Ref AthenaQueryResultBucket
          ATHENA_WORKGROUP: !Ref PAthenaWorkgroup
          CONFIG_TABLE_NAME: !Ref PAthenaTable
      Code:
        ZipFile: |
          import re
          import os
          import time
          import json

          import boto3

          TABLE_NAME = os.environ.get("CONFIG_TABLE_NAME")
          ATHENA_DATABASE_NAME = os.environ["ATHENA_DATABASE_NAME"]
          ATHENA_QUERY_RESULTS_BUCKET_NAME = os.environ["ATHENA_QUERY_RESULTS_BUCKET_NAME"]
          ATHENA_WORKGROUP = os.environ['ATHENA_WORKGROUP']
          LOGGING_ON = False  # enables additional logging to CloudWatch

          # This regular expressions pattern is compatible with how ControlTower Config logs AND also with how Config Logs are stored in S3 in standalone account
          # Structure for Config Snapshots: ORG-ID/AWSLogs/ACCOUNT-NUMBER/Config/REGION/YYYY/MM/DD/ConfigSnapshot/objectname.json.gz
          # Object name follows this pattern: ACCOUNT-NUMBER_Config_REGION_ConfigSnapshot_TIMESTAMP-YYYYMMDDHHMMSS_RANDOM-TEXT.json.gz
          # For example: 123412341234_Config_eu-north-1_ConfigSnapshot_20240306T122755Z_09c5h4kc-3jc7-4897-830v-d7a858325638.json.gz
          PATTERN = = '^(?P<org_id>[\w-]+)?/?AWSLogs/(?P<account_id>\d+)/Config/(?P<region>[\w-]+)/(?P<year>\d+)/(?P<month>\d+)/(?P<day>\d+)/(?P<type>ConfigSnapshot|ConfigHistory)/[^//]+$'

          athena = boto3.client('athena')

          class AthenaException(Exception):
              ''''This is raised only if the Query is not in state SUCCEEDED'''
              pass

          def lambda_handler(event, context):
              if LOGGING_ON: print('This is the event', event)
                
              event_object_key = None
              event_bucket_name = None
              found_event = False
                
              # Is this called directly by S3 event notification?
              try:
                  event_object_key = event['Records'][0]['s3']['object']['key']
                  event_bucket_name = event['Records'][0]['s3']['bucket']['name']
                  if LOGGING_ON: print('This is an S3 event')
                  found_event = True
              except KeyError:
                  # key doesn't exist
                  if LOGGING_ON: print('This is not an S3 event, trying SNS')
                  pass
                
              if not found_event:
                  # Is this called via SNS topic?
                  try:
                      message = json.loads(event['Records'][0]['Sns']['Message'])
                      if LOGGING_ON: print('This is an SNS event, and this is the message', message)
                      event_bucket_name = message['Records'][0]['s3']['bucket']['name']
                      event_object_key = message['Records'][0]['s3']['object']['key']
                  except KeyError:
                      # key doesn't exist
                      print('This is not an SNS event either!!')
                      # at this point I cannot continue
                      raise
              
              if LOGGING_ON:
                  print('This is the object key', event_object_key)
                  print('This is the bucket', event_bucket_name)

              object_key_parent = 's3://{event_bucket_name}/{os.path.dirname(event_object_key)}/'

              # process object key
              match  = re.match(PATTERN, event_object_key)
              if not match:
                  print(f'ERROR: Cannot match {event_object_key}. Cannot proceed.')
                  return
              if LOGGING_ON:
                  print('match.groupdict() = ', match.groupdict())
              accountid = match['account_id']
              region = match['region']
              date = '{year}-{month}-{day}'.format(**match.groupdict())

              drop_partition(accountid, region, date)
              add_partition(accountid, region, date, object_key_parent)

          def add_partition(accountid_partition_value, region_partition_value, dt_partition_value, partition_location):
              partition = build_partition_string(accountid_partition_value, region_partition_value, dt_partition_value)
              execute_query(f"ALTER TABLE {TABLE_NAME} ADD PARTITION {partition} location '{partition_location}'")

          def drop_partition(accountid_partition_value, region_partition_value, dt_partition_value):
              partition = build_partition_string(accountid_partition_value, region_partition_value, dt_partition_value)
              execute_query(f'ALTER TABLE {TABLE_NAME} DROP IF EXISTS PARTITION {partition}')

          def build_partition_string(accountid_partition_value, region_partition_value, dt_partition_value):
              return f"(accountid='{accountid_partition_value}', dt='{dt_partition_value}', region='{region_partition_value}')")

          def execute_query(query):
              print('Executing query:', query)
              start_query_response = athena.start_query_execution(
                  QueryString=query,
                  QueryExecutionContext={
                      'Database': ATHENA_DATABASE_NAME
                  },
                  ResultConfiguration={
                      'OutputLocation': f's3://{athena_query_results_bucket}',
                  },
                  WorkGroup=ATHENA_WORKGROUP
              )
              print('Query started')

              is_query_running = True
              while is_query_running:
                  time.sleep(1)
                  execution_status = athena.get_query_execution(
                      QueryExecutionId=start_query_response['QueryExecutionId']
                  )
                  query_state = execution_status['QueryExecution']['Status']['State']
                  is_query_running = query_state in ('RUNNING', 'QUEUED')

                  if not is_query_running and query_state != 'SUCCEEDED':
                      raise AthenaException('Query failed')
              print('Query completed')

  IAMRoleLambdaPartitionerConfig:
    Type: AWS::IAM::Role
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Description: "CID-CRCD Dashboard - Allows to add partitions to Athena and Glue, send logs to Cloudwatch, access Athena query results S3 bucket, receive objects from Config bucket. Each defined in separate policies"
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - Ref: "IAMManagedPolicyLambdaAthena"
      - Ref: "IAMManagedPolicyLambdaGlue"
      - Ref: "IAMManagedPolicyLambdaS3AthenaQueryResults"
      - Ref: "IAMManagedPolicyLambdaCloudWatchLogs"
      - Ref: "IAMManagedPolicyLambdaS3ConfigSnapshotObject"
      MaxSessionDuration: 3600
      RoleName: !Sub "cid-crcd-lambda-partitioner-role-${AWS::Region}-${AWS::AccountId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
          Sid: "AllowLambdaAssumeRole"

  # Allows the S3 bucket that contains the Config Snapshots to invoke the lambda function
  LambdaInvocationPermissionLambdaPartitionerConfig:
    Type: AWS::Lambda::Permission
    DeletionPolicy: "Delete"
    UpdateReplacePolicy: "Delete"
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "LambdaFunctionPartitionerConfig"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: !Sub "arn:${AWS::Partition}:s3:::${PConfigLoggingBucket}"
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref PConfigLoggingAccountID


Outputs:  
  # parameter --quicksight-datasource-role on CID-CMD tool
  QuickSightDataSourceRole:
    Description: "Name of the Role created for QuickSight"
    Value: !Ref IAMRoleQuickSightDataSource
  
  # Will be needed to allow S3 Config to trigger this lambda and to allow the lambda to access the bucket
  LambdaARN:
    Description: "ARN of the Lambda Partitioner function supporting CID-CRCD Dashboard"
    Value:
      Fn::GetAtt:
        - "LambdaFunctionPartitionerConfig"
        - "Arn"

  # Will be needed to allow S3 Config to trigger this lambda and to allow the lambda to access the bucket
  LambdaRoleARN:
    Description: "ARN of the execution role of the Lambda Partitioner function"
    Value:
      Fn::GetAtt:
        - "IAMRoleLambdaPartitionerConfig"
        - "Arn"