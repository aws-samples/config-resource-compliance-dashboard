# DEPRECATED, these resources are included in cid-crcd-01.yaml

AWSTemplateFormatVersion: '2010-09-09'
Description: Deployment of AWS Config Resource Compliance Dashboard (CRCD) v2

Parameters:

  QuickSightUser:
    Type: String
    MinLength: 1
    Default: Replace with QuickSight user
    Description: See https://quicksight.aws.amazon.com/sn/admin#users

Resources:

  CRDCAthenaQueryResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'cid-crcd-athena-query-results-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: BucketOwnerFullControl
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContent
            Status: 'Enabled'
            ExpirationInDays: 7
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            # TODO this is copied from CID CloudFormation template
            - W3045 # Consider using AWS::S3::BucketPolicy instead of AccessControl; standard Athena results setup

  CRDCAthenaWorkgroup: # Athena workgroup to execute CID-CRCD queries with its own result bucket
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: 'cid-crcd-dashboard'
      Description: 'Used by AWS Config Resource Compliance Dashboard (CRCD)'
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: true
        ResultConfiguration:
          EncryptionConfiguration:
            EncryptionOption: SSE_S3
          OutputLocation: !Sub 's3://${CRDCAthenaQueryResultsBucket}/'


  AthenaDataSourceCIDCRCD:
    Type: AWS::QuickSight::DataSource
    Properties:
      AwsAccountId: !Sub '${AWS::AccountId}'
      Type: ATHENA
      DataSourceId: "cid-crcd-datasource" # TODO for now I hard code it
      Name:         "cid-crcd-datasource"
      DataSourceParameters:
        AthenaParameters:
          WorkGroup: !Ref CRDCAthenaWorkgroup
          # TODO Hardcoded for now, then use a !Ref or a sub like this !Sub "arn:aws:iam::${AWS::AccountId}:role/${QuickSightDataSourceRoleName}"
          RoleArn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cid-crcd-quicksight-datasource-role-eu-west-1-767398072207" 
      Permissions:
        - Actions:
            - 'quicksight:DescribeDataSource'
            - 'quicksight:DescribeDataSourcePermissions'
            - 'quicksight:PassDataSource'
            - 'quicksight:UpdateDataSource'
            - 'quicksight:DeleteDataSource'
            - 'quicksight:UpdateDataSourcePermissions'
          # TODO the region is the one where QuickSight stores the users, returned by a lambda which ATM I can deploy separately (Cloud formation cid-crcd-supportingfunctions.yaml) and run manually
          Principal: !Sub 'arn:${AWS::Partition}:quicksight:eu-west-1:${AWS::AccountId}:user/default/${QuickSightUser}'
          # TODO check ${Setup.IdentityRegion} and why it was used originally - Looks like it was set by a lambda function called within the CloudFormation template or something????
          # using ${AWS::Region} does not work
          #     Resource handler returned message: "Invalid request provided: One or more principals in resource permissions list are not valid QuickSight users 
          #     (Service: QuickSight, Status Code: 400, Request ID: null)" (RequestToken: 97c30ba1-f45f-584c-419b-22075bb4d96e, HandlerErrorCode: InvalidRequest)
          # TODO original string was Principal: !Sub 'arn:${AWS::Partition}:quicksight:${Setup.IdentityRegion}:${AWS::AccountId}:user/default/${QuickSightUser}'


  GlueDatabaseCIDCRCD:
    Type: AWS::Glue::Database
    Properties:
      DatabaseInput:
        Description: "Database for AWS Config Resource Compliance Dashboard (CID-CRCD)"
        Name: "cid-crcd-database"
      # The AWS account ID for the account in which to create the catalog object.
      CatalogId: !Sub '${AWS::AccountId}'
  

Outputs:
  AthenaWorkgroupName:
    Description: 'Name of the Athena Workgroup'
    Value: !Ref CRDCAthenaWorkgroup