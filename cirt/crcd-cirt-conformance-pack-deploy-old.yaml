AWSTemplateFormatVersion: '2010-09-09'
Description: 'CRCD Dashboard - StackSet template for CRCD CIRT AWS Config Conformance Pack deployment - RUN is AWS Organizations management account'

Parameters:
  ConformancePackName:
    Type: String
    Default: 'crcd-cirt-security-recommendations'
    Description: 'Name of the conformance pack'

Resources:
  # S3 Bucket for conformance pack delivery
  # The name of the Amazon S3 bucket where Config stores conformance pack templates
  # TODO prefix of bucket as per https://docs.aws.amazon.com/cli/latest/reference/configservice/put-organization-conformance-pack.html
  ConfigDeliveryBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'awsconfigconforms-crcd-cirt-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: 'S3PutObject'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 's3:PutObject'
                Resource: !Sub '${ConfigDeliveryBucket.Arn}/*'

  # Lambda Function to Upload Conformance Pack
  UploadConformancePackFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: python3.12
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import yaml
          
          def handler(event, context):
            try:
              if event['RequestType'] in ['Create', 'Update']:
                s3 = boto3.client('s3')
                
                conformance_pack_content = '''
                ConformancePackName: crcd-cirt-security-recommendations
                Description: "Conformance pack for comprehensive security controls recommended by AWS Customer Incident Response Team (CIRT)"


                Parameters:  # Add parameters section at the top level
                  ApiGatewayEndpointTypes:
                    Type: String
                    Default: "PRIVATE,REGIONAL"
                    Description: "Allowed API Gateway endpoint types (EDGE, REGIONAL, PRIVATE)"


                Resources:
                  RootAccountHardwareMFAEnabled:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-root-account-hardware-mfa-enabled
                      Source:
                        Owner: AWS
                        SourceIdentifier: ROOT_ACCOUNT_HARDWARE_MFA_ENABLED
                      MaximumExecutionFrequency: TwentyFour_Hours

                  RootAccountMFAEnabled:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-root-account-mfa-enabled
                      Source:
                        Owner: AWS
                        SourceIdentifier: ROOT_ACCOUNT_MFA_ENABLED
                      MaximumExecutionFrequency: TwentyFour_Hours

                  IAMRootAccessKeyCheck:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-iam-root-access-key-check
                      Source:
                        Owner: AWS
                        SourceIdentifier: IAM_ROOT_ACCESS_KEY_CHECK
                      MaximumExecutionFrequency: TwentyFour_Hours

                  IAMUserMFAEnabled:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-iam-user-mfa-enabled
                      Source:
                        Owner: AWS
                        SourceIdentifier: IAM_USER_MFA_ENABLED

                  MFAEnabledForIAMConsoleAccess:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-mfa-enabled-for-iam-console-access
                      Source:
                        Owner: AWS
                        SourceIdentifier: MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS

                  AutoscalingLaunchConfigRequiresIMDSv2:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-autoscaling-launchconfig-requires-imdsv2
                      Source:
                        Owner: AWS
                        SourceIdentifier: AUTOSCALING_LAUNCH_CONFIG_PUBLIC_IP_DISABLED

                  EC2IMDSv2Check:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-ec2-imdsv2-check
                      Source:
                        Owner: AWS
                        SourceIdentifier: EC2_IMDSV2_CHECK

                  EC2LaunchTemplateIMDSv2Check:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-ec2-launch-template-imdsv2-check
                      Source:
                        Owner: AWS
                        SourceIdentifier: EC2_LAUNCH_TEMPLATE_IMDSV2_CHECK

                  S3BucketPublicReadProhibited:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-s3-bucket-public-read-prohibited
                      Source:
                        Owner: AWS
                        SourceIdentifier: S3_BUCKET_PUBLIC_READ_PROHIBITED

                  S3BucketPublicWriteProhibited:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-s3-bucket-public-write-prohibited
                      Source:
                        Owner: AWS
                        SourceIdentifier: S3_BUCKET_PUBLIC_WRITE_PROHIBITED

                  S3AccessPointInVPCOnly:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-s3-access-point-in-vpc-only
                      Source:
                        Owner: AWS
                        SourceIdentifier: S3_ACCESS_POINT_IN_VPC_ONLY

                  S3AccessPointPublicAccessBlocks:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-s3-access-point-public-access-blocks
                      Source:
                        Owner: AWS
                        SourceIdentifier: S3_ACCESS_POINT_PUBLIC_ACCESS_BLOCKS

                  S3AccountLevelPublicAccessBlocks:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-s3-account-level-public-access-blocks
                      Source:
                        Owner: AWS
                        SourceIdentifier: S3_ACCOUNT_LEVEL_PUBLIC_ACCESS_BLOCKS

                  S3AccountLevelPublicAccessBlocksPeriodic:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-s3-account-level-public-access-blocks-periodic
                      Source:
                        Owner: AWS
                        SourceIdentifier: S3_ACCOUNT_LEVEL_PUBLIC_ACCESS_BLOCKS_PERIODIC
                      MaximumExecutionFrequency: TwentyFour_Hours

                  S3BucketLevelPublicAccessProhibited:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-s3-bucket-level-public-access-prohibited
                      Source:
                        Owner: AWS
                        SourceIdentifier: S3_BUCKET_LEVEL_PUBLIC_ACCESS_PROHIBITED

                  RedshiftUnrestrictedPortAccess:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-redshift-unrestricted-port-access
                      Source:
                        Owner: AWS
                        SourceIdentifier: REDSHIFT_CLUSTER_PUBLIC_ACCESS_CHECK

                  RestrictedCommonPorts:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-restricted-common-ports
                      Source:
                        Owner: AWS
                        SourceIdentifier: RESTRICTED_INCOMING_TRAFFIC

                  VPCSGOpenOnlyToAuthorizedPorts:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-vpc-sg-open-only-to-authorized-ports
                      Source:
                        Owner: AWS
                        SourceIdentifier: VPC_SG_OPEN_ONLY_TO_AUTHORIZED_PORTS

                  VPCSGPortRestrictionCheck:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-vpc-sg-port-restriction-check
                      Source:
                        Owner: AWS
                        SourceIdentifier: VPC_SG_PORT_RESTRICTION_CHECK

                  APIGWv2AccessLogsEnabled:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-api-gwv2-access-logs-enabled
                      Source:
                        Owner: AWS
                        SourceIdentifier: API_GW_EXECUTION_LOGGING_ENABLED

                  APIGWv2AuthorizationTypeConfigured:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-api-gwv2-authorization-type-configured
                      Source:
                        Owner: AWS
                        SourceIdentifier: API_GWV2_AUTHORIZATION_TYPE_CONFIGURED

                  APIGWAssociatedWithWAF:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-api-gw-associated-with-waf
                      Source:
                        Owner: AWS
                        SourceIdentifier: API_GW_ASSOCIATED_WITH_WAF

                  APIGWCacheEnabledAndEncrypted:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-api-gw-cache-enabled-and-encrypted
                      Source:
                        Owner: AWS
                        SourceIdentifier: API_GW_CACHE_ENABLED_AND_ENCRYPTED

                  # TODO https://docs.aws.amazon.com/config/latest/developerguide/api-gw-endpoint-type-check.html
                  # We enforce certain endpoint types only - may not be everyone's use case
                  APIGWEndpointTypeCheck:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-api-gw-endpoint-type-check
                      Source:
                        Owner: AWS
                        SourceIdentifier: API_GW_ENDPOINT_TYPE_CHECK
                      InputParameters:
                        endpointConfigurationTypes: ${ApiGatewayEndpointTypes}


                  APIGWExecutionLoggingEnabled:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-api-gw-execution-logging-enabled
                      Source:
                        Owner: AWS
                        SourceIdentifier: API_GW_EXECUTION_LOGGING_ENABLED

                  APIGWSSLEnabled:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-api-gw-ssl-enabled
                      Source:
                        Owner: AWS
                        SourceIdentifier: API_GW_SSL_ENABLED

                  APIGWXRayEnabled:
                    Type: AWS::Config::ConfigRule
                    Properties:
                      ConfigRuleName: crcd-cirt-api-gw-xray-enabled
                      Source:
                        Owner: AWS
                        SourceIdentifier: API_GW_XRAY_ENABLED
                '''
                
                bucket_name = event['ResourceProperties']['BucketName']
                file_key = 'crcd-cirt-conformance-pack/crcd-cirt-conformance-pack.yaml'
                
                s3.put_object(
                  Bucket=bucket_name,
                  Key=file_key,
                  Body=conformance_pack_content
                )
                
                response_data = {
                  'S3Uri': f's3://{bucket_name}/{file_key}'
                }
                cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              else:
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            except Exception as e:
              cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})

      Timeout: 90
      MemorySize: 128

  # Custom Resource to Trigger Lambda
  UploadConformancePack:
    Type: 'Custom::UploadConformancePack'
    DependsOn: ConfigDeliveryBucket
    Properties:
      ServiceToken: !GetAtt UploadConformancePackFunction.Arn
      BucketName: !Ref ConfigDeliveryBucket

  # Bucket Policy
  ConfigDeliveryBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref ConfigDeliveryBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AWSConfigBucketPermissionsCheck'
            Effect: Allow
            Principal:
              Service: 'config.amazonaws.com'
            Action: 's3:GetBucketAcl'
            Resource: !GetAtt ConfigDeliveryBucket.Arn
          - Sid: 'AWSConfigBucketDelivery'
            Effect: Allow
            Principal:
              Service: 'config.amazonaws.com'
            Action: 's3:PutObject'
            Resource: !Sub '${ConfigDeliveryBucket.Arn}/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': 'bucket-owner-full-control'

  # IAM Role for AWS Config
  ConfigRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'config.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWS_ConfigRole'
      Policies:
        - PolicyName: 'ConfigDeliveryPermissions'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetBucketAcl'
                Resource:
                  - !GetAtt ConfigDeliveryBucket.Arn
                  - !Sub '${ConfigDeliveryBucket.Arn}/*'

  # AWS Config Conformance Pack
  ConformancePack:
    Type: 'AWS::Config::ConformancePack'
    DependsOn: 
      - UploadConformancePack
      - ConfigDeliveryBucketPolicy
      - ConfigRole
    Properties:
      ConformancePackName: !Ref ConformancePackName
      TemplateS3Uri: !GetAtt UploadConformancePack.S3Uri
      DeliveryS3Bucket: !Ref ConfigDeliveryBucket

Outputs:
  DeliveryBucketName:
    Description: 'Name of the S3 bucket for Config delivery'
    Value: !Ref ConfigDeliveryBucket
  
  ConformancePackS3Uri:
    Description: 'S3 URI of the uploaded conformance pack'
    Value: !GetAtt UploadConformancePack.S3Uri
